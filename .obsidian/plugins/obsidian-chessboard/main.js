/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var Arrow = /** @class */ (function () {
    function Arrow() {
    }
    /**
     * Draws an arrow from (x0, y0) to (x1, y1) with the specified color.
     * @param x0 - The starting x-coordinate of the arrow.
     * @param y0 - The starting y-coordinate of the arrow.
     * @param x1 - The ending x-coordinate of the arrow.
     * @param y1 - The ending y-coordinate of the arrow.
     * @param color - The color of the arrow.
     * @returns An SVGElement representing the arrow.
     */
    Arrow.drawArrow = function (x0, y0, x1, y1, color) {
        var arrow = document.createElementNS(this.xmlns, "polygon");
        var length = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));
        // Define the points of the arrow
        var startX = x0;
        var startY = y0 - this.WIDTH2;
        var midX = x0 + length - this.HEAD_WIDTH;
        var midY = startY;
        var headTopX = midX;
        var headTopY = y0 - this.ARROW_WIDTH;
        var endX = x0 + length;
        var endY = y0;
        var headBottomX = midX;
        var headBottomY = y0 + this.ARROW_WIDTH;
        var midBottomX = midX;
        var midBottomY = y0 + this.WIDTH2;
        var startBottomX = x0;
        var startBottomY = midBottomY;
        // Set the points attribute for the polygon
        arrow.setAttributeNS(null, "points", "".concat(startX, ",").concat(startY, " ").concat(midX, ",").concat(midY, " ").concat(headTopX, ",").concat(headTopY, " ").concat(endX, ",").concat(endY, " ").concat(headBottomX, ",").concat(headBottomY, " ").concat(midBottomX, ",").concat(midBottomY, " ").concat(startBottomX, ",").concat(startBottomY));
        // Rotate the arrow to point from (x0, y0) to (x1, y1)
        arrow.setAttributeNS(null, "transform", "rotate(".concat(Math.atan2(y1 - y0, x1 - x0) * (180 / Math.PI), ",").concat(x0, ",").concat(y0, ")"));
        // Set the fill color of the arrow
        arrow.setAttributeNS(null, "fill", color);
        return arrow;
    };
    Arrow.xmlns = "http://www.w3.org/2000/svg";
    Arrow.WIDTH2 = 5;
    Arrow.HEAD_WIDTH = 20;
    Arrow.ARROW_WIDTH = 10;
    return Arrow;
}());

var brilliant = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"Brilliant\">\n    <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n    <path class=\"icon-background\" fill=\"#1bada6\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    <g class=\"icon-component-shadow\" opacity=\"0.2\">\n      <path d=\"M12.57,14.6a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0L10,14.84A.41.41,0,0,1,10,14.6V12.7a.32.32,0,0,1,.09-.23.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13Zm-.12-3.93a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H10.35a.31.31,0,0,1-.34-.31L9.86,3.9A.36.36,0,0,1,10,3.66a.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H12.3a.32.32,0,0,1,.25.1.36.36,0,0,1,.09.24Z\"></path>\n      <path d=\"M8.07,14.6a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0-.11-.08a.41.41,0,0,1-.08-.24V12.7a.27.27,0,0,1,0-.13.36.36,0,0,1,.07-.1.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13ZM8,10.67a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H5.85a.31.31,0,0,1-.34-.31L5.36,3.9a.36.36,0,0,1,.09-.24.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H7.8a.35.35,0,0,1,.25.1.36.36,0,0,1,.09.24Z\"></path>\n    </g>\n    <g>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M12.57,14.1a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0L10,14.34A.41.41,0,0,1,10,14.1V12.2A.32.32,0,0,1,10,12a.39.39,0,0,1,.1-.08l.13,0h2a.31.31,0,0,1,.24.1.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13Zm-.12-3.93a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H10.35a.31.31,0,0,1-.34-.31L9.86,3.4A.36.36,0,0,1,10,3.16a.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H12.3a.32.32,0,0,1,.25.1.36.36,0,0,1,.09.24Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M8.07,14.1a.51.51,0,0,1,0,.13.44.44,0,0,1-.08.11l-.11.08-.13,0h-2l-.13,0-.11-.08a.41.41,0,0,1-.08-.24V12.2a.27.27,0,0,1,0-.13.36.36,0,0,1,.07-.1.39.39,0,0,1,.1-.08l.13,0h2A.31.31,0,0,1,8,12a.39.39,0,0,1,.08.1.51.51,0,0,1,0,.13ZM8,10.17a.17.17,0,0,1,0,.12.41.41,0,0,1-.07.11.4.4,0,0,1-.23.08H5.85a.31.31,0,0,1-.34-.31L5.36,3.4a.36.36,0,0,1,.09-.24.23.23,0,0,1,.11-.08.27.27,0,0,1,.13,0H7.8a.35.35,0,0,1,.25.1.36.36,0,0,1,.09.24Z\"></path>\n    </g>\n  </g>\n    </svg>";

var best = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"best\">\n    <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n    <path class=\"icon-background\" fill=\"#96bc4b\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    <path class=\"icon-component-shadow\" opacity=\"0.2\" d=\"M9,3.43a.5.5,0,0,0-.27.08.46.46,0,0,0-.17.22L7.24,7.17l-3.68.19a.52.52,0,0,0-.26.1.53.53,0,0,0-.16.23.45.45,0,0,0,0,.28.44.44,0,0,0,.15.23l2.86,2.32-1,3.56a.45.45,0,0,0,0,.28.46.46,0,0,0,.17.22.41.41,0,0,0,.26.09.43.43,0,0,0,.27-.08l3.09-2,3.09,2a.46.46,0,0,0,.53,0,.46.46,0,0,0,.17-.22.53.53,0,0,0,0-.28l-1-3.56L14.71,8.2A.44.44,0,0,0,14.86,8a.45.45,0,0,0,0-.28.53.53,0,0,0-.16-.23.52.52,0,0,0-.26-.1l-3.68-.2L9.44,3.73a.46.46,0,0,0-.17-.22A.5.5,0,0,0,9,3.43Z\"></path>\n    <path class=\"icon-component\" fill=\"#fff\" d=\"M9,2.93A.5.5,0,0,0,8.73,3a.46.46,0,0,0-.17.22L7.24,6.67l-3.68.19A.52.52,0,0,0,3.3,7a.53.53,0,0,0-.16.23.45.45,0,0,0,0,.28.44.44,0,0,0,.15.23L6.15,10l-1,3.56a.45.45,0,0,0,0,.28.46.46,0,0,0,.17.22.41.41,0,0,0,.26.09.43.43,0,0,0,.27-.08l3.09-2,3.09,2a.46.46,0,0,0,.53,0,.46.46,0,0,0,.17-.22.53.53,0,0,0,0-.28l-1-3.56L14.71,7.7a.44.44,0,0,0,.15-.23.45.45,0,0,0,0-.28A.53.53,0,0,0,14.7,7a.52.52,0,0,0-.26-.1l-3.68-.2L9.44,3.23A.46.46,0,0,0,9.27,3,.5.5,0,0,0,9,2.93Z\"></path>\n  </g>\n    </svg>";

var blunder = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"blunder\">\n    <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n    <path class=\"icon-background\" fill=\"#ca3431\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    <g class=\"icon-component-shadow\" opacity=\"0.2\">\n      <path d=\"M14.74,5.45A2.58,2.58,0,0,0,14,4.54,3.76,3.76,0,0,0,12.89,4a4.07,4.07,0,0,0-1.2-.19A3.92,3.92,0,0,0,10.51,4a5.87,5.87,0,0,0-.9.37,3,3,0,0,0-.32.2,3.46,3.46,0,0,1,.42.63,3.29,3.29,0,0,1,.36,1.47.31.31,0,0,0,.19-.06l.11-.08a2.9,2.9,0,0,1,.29-.19,3.89,3.89,0,0,1,.41-.17,1.55,1.55,0,0,1,.48-.07,1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26.8.8,0,0,1,.07.34,1,1,0,0,1-.25.67,7.71,7.71,0,0,1-.65.63,6.2,6.2,0,0,0-.48.43,2.93,2.93,0,0,0-.45.54,2.55,2.55,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83V11a.24.24,0,0,0,0,.12.35.35,0,0,0,.17.17l.12,0h1.71l.12,0a.23.23,0,0,0,.1-.07.21.21,0,0,0,.06-.1.27.27,0,0,0,0-.12V10.8a1,1,0,0,1,.26-.7q.27-.28.66-.63A5.79,5.79,0,0,0,14.05,9a4.51,4.51,0,0,0,.48-.6,2.56,2.56,0,0,0,.36-.72,2.81,2.81,0,0,0,.14-1A2.66,2.66,0,0,0,14.74,5.45Z\"></path>\n      <path d=\"M12.38,12.65H10.5l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0h1.88a.24.24,0,0,0,.12,0,.26.26,0,0,0,.11-.07.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V13a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,12.38,12.65Z\"></path>\n      <path d=\"M6.79,12.65H4.91l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0H6.79a.24.24,0,0,0,.12,0A.26.26,0,0,0,7,15a.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V13a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,6.79,12.65Z\"></path>\n      <path d=\"M8.39,4.54A3.76,3.76,0,0,0,7.3,4a4.07,4.07,0,0,0-1.2-.19A3.92,3.92,0,0,0,4.92,4a5.87,5.87,0,0,0-.9.37,3.37,3.37,0,0,0-.55.38l-.21.19a.32.32,0,0,0,0,.41l1,1.2a.26.26,0,0,0,.2.12.48.48,0,0,0,.24-.06l.11-.08a2.9,2.9,0,0,1,.29-.19l.4-.17A1.66,1.66,0,0,1,6,6.06a1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26A.77.77,0,0,1,7,6.9a1,1,0,0,1-.26.67,7.6,7.6,0,0,1-.64.63,6.28,6.28,0,0,0-.49.43,2.93,2.93,0,0,0-.45.54,2.72,2.72,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83V11a.43.43,0,0,0,0,.12.39.39,0,0,0,.08.1.18.18,0,0,0,.1.07.21.21,0,0,0,.12,0H6.72l.12,0a.23.23,0,0,0,.1-.07.36.36,0,0,0,.07-.1A.5.5,0,0,0,7,11V10.8a1,1,0,0,1,.27-.7A8,8,0,0,1,8,9.47c.18-.15.35-.31.52-.48A7,7,0,0,0,9,8.39a3.23,3.23,0,0,0,.36-.72,3.07,3.07,0,0,0,.13-1,2.66,2.66,0,0,0-.29-1.27A2.58,2.58,0,0,0,8.39,4.54Z\"></path>\n    </g>\n    <g>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M14.74,5A2.58,2.58,0,0,0,14,4a3.76,3.76,0,0,0-1.09-.56,4.07,4.07,0,0,0-1.2-.19,3.92,3.92,0,0,0-1.18.17,5.87,5.87,0,0,0-.9.37,3,3,0,0,0-.32.2,3.46,3.46,0,0,1,.42.63,3.29,3.29,0,0,1,.36,1.47.31.31,0,0,0,.19-.06L10.37,6a2.9,2.9,0,0,1,.29-.19,3.89,3.89,0,0,1,.41-.17,1.55,1.55,0,0,1,.48-.07,1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26.8.8,0,0,1,.07.34,1,1,0,0,1-.25.67,7.71,7.71,0,0,1-.65.63,6.2,6.2,0,0,0-.48.43,2.93,2.93,0,0,0-.45.54,2.55,2.55,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83v.35a.24.24,0,0,0,0,.12.35.35,0,0,0,.17.17l.12,0h1.71l.12,0a.23.23,0,0,0,.1-.07.21.21,0,0,0,.06-.1.27.27,0,0,0,0-.12V10.3a1,1,0,0,1,.26-.7q.27-.28.66-.63a5.79,5.79,0,0,0,.51-.48,4.51,4.51,0,0,0,.48-.6,2.56,2.56,0,0,0,.36-.72,2.81,2.81,0,0,0,.14-1A2.66,2.66,0,0,0,14.74,5Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M12.38,12.15H10.5l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0h1.88a.24.24,0,0,0,.12,0,.26.26,0,0,0,.11-.07.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V12.46a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,12.38,12.15Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M6.79,12.15H4.91l-.12,0a.34.34,0,0,0-.18.29v1.82a.36.36,0,0,0,.08.23.23.23,0,0,0,.1.07l.12,0H6.79a.24.24,0,0,0,.12,0A.26.26,0,0,0,7,14.51a.36.36,0,0,0,.07-.1.28.28,0,0,0,0-.13V12.46a.27.27,0,0,0,0-.12.61.61,0,0,0-.07-.1A.32.32,0,0,0,6.79,12.15Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M8.39,4A3.76,3.76,0,0,0,7.3,3.48a4.07,4.07,0,0,0-1.2-.19,3.92,3.92,0,0,0-1.18.17,5.87,5.87,0,0,0-.9.37,3.37,3.37,0,0,0-.55.38l-.21.19a.32.32,0,0,0,0,.41l1,1.2a.26.26,0,0,0,.2.12.48.48,0,0,0,.24-.06L4.78,6a2.9,2.9,0,0,1,.29-.19l.4-.17A1.66,1.66,0,0,1,6,5.56a1.1,1.1,0,0,1,.72.24.72.72,0,0,1,.23.26A.77.77,0,0,1,7,6.4a1,1,0,0,1-.26.67,7.6,7.6,0,0,1-.64.63,6.28,6.28,0,0,0-.49.43,2.93,2.93,0,0,0-.45.54,2.72,2.72,0,0,0-.33.66,2.62,2.62,0,0,0-.13.83v.35a.43.43,0,0,0,0,.12.39.39,0,0,0,.08.1.18.18,0,0,0,.1.07.21.21,0,0,0,.12,0H6.72l.12,0a.23.23,0,0,0,.1-.07.36.36,0,0,0,.07-.1.5.5,0,0,0,0-.12V10.3a1,1,0,0,1,.27-.7A8,8,0,0,1,8,9c.18-.15.35-.31.52-.48A7,7,0,0,0,9,7.89a3.23,3.23,0,0,0,.36-.72,3.07,3.07,0,0,0,.13-1A2.66,2.66,0,0,0,9.15,5,2.58,2.58,0,0,0,8.39,4Z\"></path>\n    </g>\n  </g>\n    </svg>";

var good = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"good\">\n    <g>\n      <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n      <path class=\"icon-background\" fill=\"#96af8b\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    </g>\n    <g>\n      <path class=\"icon-component-shadow\" opacity=\"0.2\" d=\"M15.11,6.81,9.45,12.47,7.79,14.13a.39.39,0,0,1-.28.11.39.39,0,0,1-.27-.11L2.89,9.78a.39.39,0,0,1-.11-.28.39.39,0,0,1,.11-.27L4.28,7.85a.34.34,0,0,1,.12-.09l.15,0a.37.37,0,0,1,.15,0,.38.38,0,0,1,.13.09l2.69,2.68,5.65-5.65a.38.38,0,0,1,.13-.09.37.37,0,0,1,.15,0,.4.4,0,0,1,.15,0,.34.34,0,0,1,.12.09l1.39,1.38a.41.41,0,0,1,.08.13.33.33,0,0,1,0,.15.4.4,0,0,1,0,.15A.5.5,0,0,1,15.11,6.81Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M15.11,6.31,9.45,12,7.79,13.63a.39.39,0,0,1-.28.11.39.39,0,0,1-.27-.11L2.89,9.28A.39.39,0,0,1,2.78,9a.39.39,0,0,1,.11-.27L4.28,7.35a.34.34,0,0,1,.12-.09l.15,0a.37.37,0,0,1,.15,0,.38.38,0,0,1,.13.09L7.52,10l5.65-5.65a.38.38,0,0,1,.13-.09.37.37,0,0,1,.15,0,.4.4,0,0,1,.15,0,.34.34,0,0,1,.12.09l1.39,1.38a.41.41,0,0,1,.08.13.33.33,0,0,1,0,.15.4.4,0,0,1,0,.15A.5.5,0,0,1,15.11,6.31Z\"></path>\n    </g>\n  </g>\n    </svg>";

var inaccuracy = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"inaccuracy\">\n    <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n    <path class=\"icon-background\" fill=\"#f7c045\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    <g class=\"icon-component-shadow\" opacity=\"0.2\">\n      <path d=\"M13.66,14.8a.28.28,0,0,1,0,.13.23.23,0,0,1-.08.11.28.28,0,0,1-.11.08l-.12,0h-2l-.13,0a.27.27,0,0,1-.1-.08A.36.36,0,0,1,11,14.8V12.9a.59.59,0,0,1,0-.13.36.36,0,0,1,.07-.1l.1-.08.13,0h2a.33.33,0,0,1,.23.1.39.39,0,0,1,.08.1.28.28,0,0,1,0,.13Zm-.12-3.93a.31.31,0,0,1,0,.13.3.3,0,0,1-.07.1.3.3,0,0,1-.23.08H11.43a.31.31,0,0,1-.34-.31L10.94,4.1A.5.5,0,0,1,11,3.86l.11-.08.13,0h2.11a.35.35,0,0,1,.26.1.41.41,0,0,1,.08.24Z\"></path>\n      <path d=\"M7.65,14.82a.27.27,0,0,1,0,.12.26.26,0,0,1-.07.11l-.1.07-.13,0H5.43a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08.31.31,0,0,1-.09-.22V13a.36.36,0,0,1,.09-.23l.1-.07.12,0H7.32a.32.32,0,0,1,.23.09.3.3,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73A5.58,5.58,0,0,1,9,9a4.85,4.85,0,0,1-.52.49,8,8,0,0,0-.65.63,1,1,0,0,0-.27.7V11a.21.21,0,0,1,0,.12.17.17,0,0,1-.06.1.23.23,0,0,1-.1.07l-.12,0H5.53a.21.21,0,0,1-.12,0,.18.18,0,0,1-.1-.07.2.2,0,0,1-.08-.1.37.37,0,0,1,0-.12v-.35a2.68,2.68,0,0,1,.13-.84,2.91,2.91,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.84,7.84,0,0,0,.65-.64,1,1,0,0,0,.25-.67.77.77,0,0,0-.07-.34.67.67,0,0,0-.23-.27A1.16,1.16,0,0,0,6.49,6,1.61,1.61,0,0,0,6,6.11a3,3,0,0,0-.41.18,1.75,1.75,0,0,0-.29.18l-.11.09A.5.5,0,0,1,5,6.62a.31.31,0,0,1-.21-.13l-1-1.21a.3.3,0,0,1,0-.4A1.36,1.36,0,0,1,4,4.68a3.07,3.07,0,0,1,.56-.38,5.49,5.49,0,0,1,.9-.37,3.69,3.69,0,0,1,1.19-.17,3.92,3.92,0,0,1,2.3.75,2.85,2.85,0,0,1,.77.92A2.82,2.82,0,0,1,10,6.71,3,3,0,0,1,9.85,7.65Z\"></path>\n    </g>\n    <g>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M13.66,14.3a.28.28,0,0,1,0,.13.23.23,0,0,1-.08.11.28.28,0,0,1-.11.08l-.12,0h-2l-.13,0a.27.27,0,0,1-.1-.08A.36.36,0,0,1,11,14.3V12.4a.59.59,0,0,1,0-.13.36.36,0,0,1,.07-.1l.1-.08.13,0h2a.33.33,0,0,1,.23.1.39.39,0,0,1,.08.1.28.28,0,0,1,0,.13Zm-.12-3.93a.31.31,0,0,1,0,.13.3.3,0,0,1-.07.1.3.3,0,0,1-.23.08H11.43a.31.31,0,0,1-.34-.31L10.94,3.6A.5.5,0,0,1,11,3.36l.11-.08.13,0h2.11a.35.35,0,0,1,.26.1.41.41,0,0,1,.08.24Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M7.65,14.32a.27.27,0,0,1,0,.12.26.26,0,0,1-.07.11l-.1.07-.13,0H5.43a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08.31.31,0,0,1-.09-.22V12.49a.36.36,0,0,1,.09-.23l.1-.07.12,0H7.32a.32.32,0,0,1,.23.09.3.3,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73,5.58,5.58,0,0,1-.49.6A4.85,4.85,0,0,1,8.48,9a8,8,0,0,0-.65.63,1,1,0,0,0-.27.7v.22a.21.21,0,0,1,0,.12.17.17,0,0,1-.06.1.23.23,0,0,1-.1.07l-.12,0H5.53a.21.21,0,0,1-.12,0,.18.18,0,0,1-.1-.07.2.2,0,0,1-.08-.1.37.37,0,0,1,0-.12v-.35a2.68,2.68,0,0,1,.13-.84,2.91,2.91,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.84,7.84,0,0,0,.65-.64,1,1,0,0,0,.25-.67.77.77,0,0,0-.07-.34.67.67,0,0,0-.23-.27,1.16,1.16,0,0,0-.72-.24A1.61,1.61,0,0,0,6,5.61a3,3,0,0,0-.41.18A1.75,1.75,0,0,0,5.3,6l-.11.09A.5.5,0,0,1,5,6.12.31.31,0,0,1,4.74,6l-1-1.21a.3.3,0,0,1,0-.4A1.36,1.36,0,0,1,4,4.18a3.07,3.07,0,0,1,.56-.38,5.49,5.49,0,0,1,.9-.37,3.69,3.69,0,0,1,1.19-.17A3.92,3.92,0,0,1,8.93,4a2.85,2.85,0,0,1,.77.92A2.82,2.82,0,0,1,10,6.21,3,3,0,0,1,9.85,7.15Z\"></path>\n    </g>\n  </g>\n    </svg>";

var incorrect = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"incorrect\">\n    <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n    <path class=\"icon-background\" fill=\"#ca3431\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    <g class=\"icon-component-shadow\" opacity=\"0.2\">\n      <path d=\"M14,12.51a.57.57,0,0,1,.08.13.39.39,0,0,1,0,.3.5.5,0,0,1-.08.12l-1.38,1.38a.5.5,0,0,1-.12.08l-.15,0-.15,0a.57.57,0,0,1-.13-.08L9,11.37,5.94,14.44a.57.57,0,0,1-.13.08l-.15,0-.15,0a.36.36,0,0,1-.12-.08L4,13.06a.39.39,0,0,1-.11-.27A.41.41,0,0,1,4,12.51L7.07,9.45,4,6.39a.43.43,0,0,1-.11-.28A.39.39,0,0,1,4,5.84L5.39,4.46a.39.39,0,0,1,.27-.11.43.43,0,0,1,.28.11L9,7.52l3.06-3.06a.41.41,0,0,1,.28-.11.39.39,0,0,1,.27.11L14,5.84a.36.36,0,0,1,.08.12.39.39,0,0,1,0,.3.57.57,0,0,1-.08.13L10.92,9.45Z\"></path>\n    </g>\n    <path class=\"icon-component\" fill=\"#f1f2f2\" d=\"M14,12a.57.57,0,0,1,.08.13.39.39,0,0,1,0,.3.5.5,0,0,1-.08.12l-1.38,1.38a.5.5,0,0,1-.12.08l-.15,0-.15,0a.57.57,0,0,1-.13-.08L9,10.87,5.94,13.94a.57.57,0,0,1-.13.08l-.15,0-.15,0a.36.36,0,0,1-.12-.08L4,12.56a.39.39,0,0,1-.11-.27A.41.41,0,0,1,4,12L7.07,9,4,5.89a.43.43,0,0,1-.11-.28A.39.39,0,0,1,4,5.34L5.39,4a.39.39,0,0,1,.27-.11A.43.43,0,0,1,5.94,4L9,7,12.06,4a.41.41,0,0,1,.28-.11.39.39,0,0,1,.27.11L14,5.34a.36.36,0,0,1,.08.12.39.39,0,0,1,0,.3.57.57,0,0,1-.08.13L10.92,9Z\"></path>\n  </g>\n    </svg>";

var mistake = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"mistake\">\n    <g>\n      <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n      <path class=\"icon-background\" fill=\"#e58f2a\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    </g>\n    <g>\n      <g class=\"icon-component-shadow\" opacity=\"0.2\">\n        <path d=\"M9.92,15a.27.27,0,0,1,0,.12.41.41,0,0,1-.07.11.32.32,0,0,1-.23.09H7.7a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08A.31.31,0,0,1,7.39,15V13.19A.32.32,0,0,1,7.48,13l.1-.07.12,0H9.59a.32.32,0,0,1,.23.09.61.61,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73,5.58,5.58,0,0,1-.49.6,6,6,0,0,1-.52.49,8,8,0,0,0-.65.63,1,1,0,0,0-.27.7v.22a.24.24,0,0,1,0,.12.17.17,0,0,1-.06.1.3.3,0,0,1-.1.07l-.12,0H7.79l-.12,0a.3.3,0,0,1-.1-.07.26.26,0,0,1-.07-.1.37.37,0,0,1,0-.12v-.35A2.42,2.42,0,0,1,7.61,10a2.55,2.55,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.73,7.73,0,0,0,.64-.64,1,1,0,0,0,.26-.67.77.77,0,0,0-.07-.34.75.75,0,0,0-.23-.27,1.16,1.16,0,0,0-.72-.24,1.61,1.61,0,0,0-.49.07,3,3,0,0,0-.41.18,1.41,1.41,0,0,0-.29.18l-.11.09a.5.5,0,0,1-.24.06A.31.31,0,0,1,7,6.69L6,5.48a.29.29,0,0,1,0-.4,1.36,1.36,0,0,1,.21-.2,3.07,3.07,0,0,1,.56-.38,5.38,5.38,0,0,1,.89-.37A3.75,3.75,0,0,1,8.9,4a4.07,4.07,0,0,1,1.2.19,4,4,0,0,1,1.09.56,2.76,2.76,0,0,1,.78.92,2.82,2.82,0,0,1,.28,1.28A3,3,0,0,1,12.12,7.85Z\"></path>\n      </g>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M9.92,14.52a.27.27,0,0,1,0,.12.41.41,0,0,1-.07.11.32.32,0,0,1-.23.09H7.7a.25.25,0,0,1-.12,0,.27.27,0,0,1-.1-.08.31.31,0,0,1-.09-.22V12.69a.32.32,0,0,1,.09-.23l.1-.07.12,0H9.59a.32.32,0,0,1,.23.09.61.61,0,0,1,.07.1.28.28,0,0,1,0,.13Zm2.2-7.17a3.1,3.1,0,0,1-.36.73,5.58,5.58,0,0,1-.49.6,6,6,0,0,1-.52.49,8,8,0,0,0-.65.63,1,1,0,0,0-.27.7v.22a.24.24,0,0,1,0,.12.17.17,0,0,1-.06.1.3.3,0,0,1-.1.07l-.12,0H7.79l-.12,0a.3.3,0,0,1-.1-.07.26.26,0,0,1-.07-.1.37.37,0,0,1,0-.12v-.35a2.42,2.42,0,0,1,.13-.84,2.55,2.55,0,0,1,.33-.66,3.38,3.38,0,0,1,.45-.55c.16-.15.33-.29.49-.42a7.73,7.73,0,0,0,.64-.64,1,1,0,0,0,.26-.67.77.77,0,0,0-.07-.34A.75.75,0,0,0,9.48,6a1.16,1.16,0,0,0-.72-.24,1.61,1.61,0,0,0-.49.07A3,3,0,0,0,7.86,6a1.41,1.41,0,0,0-.29.18l-.11.09a.5.5,0,0,1-.24.06A.31.31,0,0,1,7,6.19L6,5a.29.29,0,0,1,0-.4,1.36,1.36,0,0,1,.21-.2A3.07,3.07,0,0,1,6.81,4a5.38,5.38,0,0,1,.89-.37,3.75,3.75,0,0,1,1.2-.17,4.07,4.07,0,0,1,1.2.19,4,4,0,0,1,1.09.56,2.76,2.76,0,0,1,.78.92,2.82,2.82,0,0,1,.28,1.28A3,3,0,0,1,12.12,7.35Z\"></path>\n    </g>\n  </g>\n    </svg>";

var excellent = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"excellent\">\n    <g>\n      <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n      <path class=\"icon-background\" fill=\"#96bc4b\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n    </g>\n    <g class=\"icon-component-shadow\" opacity=\"0.2\">\n      <path d=\"M13.79,11.34c0-.2.4-.53.4-.94S14,9.72,14,9.58a2.06,2.06,0,0,0,.18-.83,1,1,0,0,0-.3-.69,1.13,1.13,0,0,0-.55-.2,10.29,10.29,0,0,1-2.07,0c-.37-.23,0-1.18.18-1.7S11.9,4,10.62,3.7c-.69-.17-.66.37-.78.9-.05.21-.09.43-.13.57A5,5,0,0,1,7.05,8.23a1.57,1.57,0,0,1-.42.18v4.94A7.23,7.23,0,0,1,8,13.53c.52.12.91.25,1.44.33A11.11,11.11,0,0,0,11,14a6.65,6.65,0,0,0,1.18,0,1.09,1.09,0,0,0,1-.59.66.66,0,0,0,.06-.2,1.63,1.63,0,0,1,.07-.3c.13-.28.37-.3.5-.68S13.74,11.53,13.79,11.34Z\"></path>\n      <path d=\"M5.49,8.09H4.31a.5.5,0,0,0-.5.5v4.56a.5.5,0,0,0,.5.5H5.49a.5.5,0,0,0,.5-.5V8.59A.5.5,0,0,0,5.49,8.09Z\"></path>\n    </g>\n    <g>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M13.79,10.84c0-.2.4-.53.4-.94S14,9.22,14,9.08a2.06,2.06,0,0,0,.18-.83,1,1,0,0,0-.3-.69,1.13,1.13,0,0,0-.55-.2,10.29,10.29,0,0,1-2.07,0c-.37-.23,0-1.18.18-1.7s.51-2.12-.77-2.43c-.69-.17-.66.37-.78.9-.05.21-.09.43-.13.57A5,5,0,0,1,7.05,7.73a1.57,1.57,0,0,1-.42.18v4.94A7.23,7.23,0,0,1,8,13c.52.12.91.25,1.44.33a11.11,11.11,0,0,0,1.62.16,6.65,6.65,0,0,0,1.18,0,1.09,1.09,0,0,0,1-.59.66.66,0,0,0,.06-.2,1.63,1.63,0,0,1,.07-.3c.13-.28.37-.3.5-.68S13.74,11,13.79,10.84Z\"></path>\n      <path class=\"icon-component\" fill=\"#fff\" d=\"M5.49,7.59H4.31a.5.5,0,0,0-.5.5v4.56a.5.5,0,0,0,.5.5H5.49a.5.5,0,0,0,.5-.5V8.09A.5.5,0,0,0,5.49,7.59Z\"></path>\n    </g>\n  </g>\n    </svg>";

var forced = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"\" width=\"100%\" height=\"100%\" viewBox=\"0 0 18 19\">\n        <g id=\"forced\">\n    <g id=\"fast_win\">\n      <g>\n        <path class=\"icon-shadow\" opacity=\"0.3\" d=\"M9,.5a9,9,0,1,0,9,9A9,9,0,0,0,9,.5Z\"></path>\n        <path class=\"icon-background\" fill=\"#96af8b\" d=\"M9,0a9,9,0,1,0,9,9A9,9,0,0,0,9,0Z\"></path>\n      </g>\n    </g>\n    <g class=\"icon-component-shadow\" opacity=\"0.2\">\n      <path d=\"M14.39,9.07,9,4.31a.31.31,0,0,0-.3,0,.32.32,0,0,0-.13.1.29.29,0,0,0,0,.16V7.42H3.9a.58.58,0,0,0-.19,0,.5.5,0,0,0-.17.11.91.91,0,0,0-.11.16.63.63,0,0,0,0,.19v3.41a.58.58,0,0,0,0,.19.64.64,0,0,0,.11.16.39.39,0,0,0,.17.11.41.41,0,0,0,.19,0H8.5v2.74a.26.26,0,0,0,.16.26.3.3,0,0,0,.16,0A.34.34,0,0,0,9,14.79L14.39,10a.69.69,0,0,0,.16-.22.7.7,0,0,0,0-.52A.69.69,0,0,0,14.39,9.07Z\"></path>\n    </g>\n    <path class=\"icon-component\" fill=\"#fff\" d=\"M14.39,8.57,9,3.81a.31.31,0,0,0-.3,0,.32.32,0,0,0-.13.1A.29.29,0,0,0,8.5,4V6.92H3.9a.58.58,0,0,0-.19,0,.5.5,0,0,0-.17.11.91.91,0,0,0-.11.16.63.63,0,0,0,0,.19v3.41a.58.58,0,0,0,0,.19.64.64,0,0,0,.11.16.39.39,0,0,0,.17.11.41.41,0,0,0,.19,0H8.5v2.74a.26.26,0,0,0,.16.26.3.3,0,0,0,.16,0A.34.34,0,0,0,9,14.29l5.42-4.76a.69.69,0,0,0,.16-.22.7.7,0,0,0,0-.52A.69.69,0,0,0,14.39,8.57Z\"></path>\n  </g>\n    </svg>";

//@ts-ignore
var Icons = /** @class */ (function () {
    function Icons() {
    }
    Icons.loadIcon = function (icon) {
        var parser = new DOMParser();
        var svgDoc = parser.parseFromString(icon, "image/svg+xml");
        var svgElement = svgDoc.documentElement;
        return svgElement;
    };
    Icons.brilliant = Icons.loadIcon(brilliant);
    Icons.best = Icons.loadIcon(best);
    Icons.blunder = Icons.loadIcon(blunder);
    Icons.good = Icons.loadIcon(good);
    Icons.inaccuracy = Icons.loadIcon(inaccuracy);
    Icons.incorrect = Icons.loadIcon(incorrect);
    Icons.mistake = Icons.loadIcon(mistake);
    Icons.excellent = Icons.loadIcon(excellent);
    Icons.forced = Icons.loadIcon(forced);
    return Icons;
}());

var pgn_1;
var hasRequiredPgn;

function requirePgn () {
	if (hasRequiredPgn) return pgn_1;
	hasRequiredPgn = 1;



	  function rootNode(comment) {
	  	return comment !== null ? { comment, variations: [] } : { variations: []}
	  }

	  function node(move, suffix, nag, comment, variations) {
	  	const node = { move, variations };

	    if (suffix) {
	    	node.suffix = suffix;
	    }

	    if (nag) {
	    	node.nag = nag;
	    }

	    if (comment !== null) {
	    	node.comment = comment;
	    }

	    return node
	  }

	  function lineToTree(...nodes) {
	  	const [root, ...rest] = nodes;

	    let parent = root;

	    for (const child of rest) {
	    	if (child !== null) {
	        	parent.variations = [child, ...child.variations];
	            child.variations = [];
	            parent = child;
	        }
	    }

	  	return root
	  }

	  function pgn(headers, game) {
	  	if (game.marker && game.marker.comment) {
	    	let node = game.root;
	        while (true) {
	        	const next = node.variations[0];
	            if (!next) {
	            	node.comment = game.marker.comment;
	            	break
	            }
	            node = next;
	        }
	    }

	  	return {
	    	headers,
	        root: game.root,
	        result: (game.marker && game.marker.result) ?? undefined
	    }
	  }

	function peg$subclass(child, parent) {
	  function C() { this.constructor = child; }
	  C.prototype = parent.prototype;
	  child.prototype = new C();
	}

	function peg$SyntaxError(message, expected, found, location) {
	  var self = Error.call(this, message);
	  // istanbul ignore next Check is a necessary evil to support older environments
	  if (Object.setPrototypeOf) {
	    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
	  }
	  self.expected = expected;
	  self.found = found;
	  self.location = location;
	  self.name = "SyntaxError";
	  return self;
	}

	peg$subclass(peg$SyntaxError, Error);

	function peg$padEnd(str, targetLength, padString) {
	  padString = padString || " ";
	  if (str.length > targetLength) { return str; }
	  targetLength -= str.length;
	  padString += padString.repeat(targetLength);
	  return str + padString.slice(0, targetLength);
	}

	peg$SyntaxError.prototype.format = function(sources) {
	  var str = "Error: " + this.message;
	  if (this.location) {
	    var src = null;
	    var k;
	    for (k = 0; k < sources.length; k++) {
	      if (sources[k].source === this.location.source) {
	        src = sources[k].text.split(/\r\n|\n|\r/g);
	        break;
	      }
	    }
	    var s = this.location.start;
	    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
	      ? this.location.source.offset(s)
	      : s;
	    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
	    if (src) {
	      var e = this.location.end;
	      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
	      var line = src[s.line - 1];
	      var last = s.line === e.line ? e.column : line.length + 1;
	      var hatLen = (last - s.column) || 1;
	      str += "\n --> " + loc + "\n"
	          + filler + " |\n"
	          + offset_s.line + " | " + line + "\n"
	          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
	          + peg$padEnd("", hatLen, "^");
	    } else {
	      str += "\n at " + loc;
	    }
	  }
	  return str;
	};

	peg$SyntaxError.buildMessage = function(expected, found) {
	  var DESCRIBE_EXPECTATION_FNS = {
	    literal: function(expectation) {
	      return "\"" + literalEscape(expectation.text) + "\"";
	    },

	    class: function(expectation) {
	      var escapedParts = expectation.parts.map(function(part) {
	        return Array.isArray(part)
	          ? classEscape(part[0]) + "-" + classEscape(part[1])
	          : classEscape(part);
	      });

	      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
	    },

	    any: function() {
	      return "any character";
	    },

	    end: function() {
	      return "end of input";
	    },

	    other: function(expectation) {
	      return expectation.description;
	    }
	  };

	  function hex(ch) {
	    return ch.charCodeAt(0).toString(16).toUpperCase();
	  }

	  function literalEscape(s) {
	    return s
	      .replace(/\\/g, "\\\\")
	      .replace(/"/g,  "\\\"")
	      .replace(/\0/g, "\\0")
	      .replace(/\t/g, "\\t")
	      .replace(/\n/g, "\\n")
	      .replace(/\r/g, "\\r")
	      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
	  }

	  function classEscape(s) {
	    return s
	      .replace(/\\/g, "\\\\")
	      .replace(/\]/g, "\\]")
	      .replace(/\^/g, "\\^")
	      .replace(/-/g,  "\\-")
	      .replace(/\0/g, "\\0")
	      .replace(/\t/g, "\\t")
	      .replace(/\n/g, "\\n")
	      .replace(/\r/g, "\\r")
	      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
	      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
	  }

	  function describeExpectation(expectation) {
	    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
	  }

	  function describeExpected(expected) {
	    var descriptions = expected.map(describeExpectation);
	    var i, j;

	    descriptions.sort();

	    if (descriptions.length > 0) {
	      for (i = 1, j = 1; i < descriptions.length; i++) {
	        if (descriptions[i - 1] !== descriptions[i]) {
	          descriptions[j] = descriptions[i];
	          j++;
	        }
	      }
	      descriptions.length = j;
	    }

	    switch (descriptions.length) {
	      case 1:
	        return descriptions[0];

	      case 2:
	        return descriptions[0] + " or " + descriptions[1];

	      default:
	        return descriptions.slice(0, -1).join(", ")
	          + ", or "
	          + descriptions[descriptions.length - 1];
	    }
	  }

	  function describeFound(found) {
	    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
	  }

	  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	};

	function peg$parse(input, options) {
	  options = options !== undefined ? options : {};

	  var peg$FAILED = {};
	  var peg$source = options.grammarSource;

	  var peg$startRuleFunctions = { pgn: peg$parsepgn };
	  var peg$startRuleFunction = peg$parsepgn;

	  var peg$c0 = "[";
	  var peg$c1 = "\"";
	  var peg$c2 = "]";
	  var peg$c3 = ".";
	  var peg$c4 = "O-O-O";
	  var peg$c5 = "O-O";
	  var peg$c6 = "0-0-0";
	  var peg$c7 = "0-0";
	  var peg$c8 = "$";
	  var peg$c9 = "{";
	  var peg$c10 = "}";
	  var peg$c11 = ";";
	  var peg$c12 = "(";
	  var peg$c13 = ")";
	  var peg$c14 = "1-0";
	  var peg$c15 = "0-1";
	  var peg$c16 = "1/2-1/2";
	  var peg$c17 = "*";

	  var peg$r0 = /^[a-zA-Z]/;
	  var peg$r1 = /^[^"]/;
	  var peg$r2 = /^[0-9]/;
	  var peg$r3 = /^[.]/;
	  var peg$r4 = /^[a-zA-Z1-8\-=]/;
	  var peg$r5 = /^[+#]/;
	  var peg$r6 = /^[!?]/;
	  var peg$r7 = /^[^}]/;
	  var peg$r8 = /^[^\r\n]/;
	  var peg$r9 = /^[ \t\r\n]/;

	  var peg$e0 = peg$otherExpectation("tag pair");
	  var peg$e1 = peg$literalExpectation("[", false);
	  var peg$e2 = peg$literalExpectation("\"", false);
	  var peg$e3 = peg$literalExpectation("]", false);
	  var peg$e4 = peg$otherExpectation("tag name");
	  var peg$e5 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
	  var peg$e6 = peg$otherExpectation("tag value");
	  var peg$e7 = peg$classExpectation(["\""], true, false);
	  var peg$e8 = peg$otherExpectation("move number");
	  var peg$e9 = peg$classExpectation([["0", "9"]], false, false);
	  var peg$e10 = peg$literalExpectation(".", false);
	  var peg$e11 = peg$classExpectation(["."], false, false);
	  var peg$e12 = peg$otherExpectation("standard algebraic notation");
	  var peg$e13 = peg$literalExpectation("O-O-O", false);
	  var peg$e14 = peg$literalExpectation("O-O", false);
	  var peg$e15 = peg$literalExpectation("0-0-0", false);
	  var peg$e16 = peg$literalExpectation("0-0", false);
	  var peg$e17 = peg$classExpectation([["a", "z"], ["A", "Z"], ["1", "8"], "-", "="], false, false);
	  var peg$e18 = peg$classExpectation(["+", "#"], false, false);
	  var peg$e19 = peg$otherExpectation("suffix annotation");
	  var peg$e20 = peg$classExpectation(["!", "?"], false, false);
	  var peg$e21 = peg$otherExpectation("NAG");
	  var peg$e22 = peg$literalExpectation("$", false);
	  var peg$e23 = peg$otherExpectation("brace comment");
	  var peg$e24 = peg$literalExpectation("{", false);
	  var peg$e25 = peg$classExpectation(["}"], true, false);
	  var peg$e26 = peg$literalExpectation("}", false);
	  var peg$e27 = peg$otherExpectation("rest of line comment");
	  var peg$e28 = peg$literalExpectation(";", false);
	  var peg$e29 = peg$classExpectation(["\r", "\n"], true, false);
	  var peg$e30 = peg$otherExpectation("variation");
	  var peg$e31 = peg$literalExpectation("(", false);
	  var peg$e32 = peg$literalExpectation(")", false);
	  var peg$e33 = peg$otherExpectation("game termination marker");
	  var peg$e34 = peg$literalExpectation("1-0", false);
	  var peg$e35 = peg$literalExpectation("0-1", false);
	  var peg$e36 = peg$literalExpectation("1/2-1/2", false);
	  var peg$e37 = peg$literalExpectation("*", false);
	  var peg$e38 = peg$otherExpectation("whitespace");
	  var peg$e39 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false);

	  var peg$f0 = function(headers, game) { return pgn(headers, game) };
	  var peg$f1 = function(tagPairs) { return Object.fromEntries(tagPairs) };
	  var peg$f2 = function(tagName, tagValue) { return [tagName, tagValue] };
	  var peg$f3 = function(root, marker) { return { root, marker} };
	  var peg$f4 = function(comment, moves) { return lineToTree(rootNode(comment), ...moves.flat()) };
	  var peg$f5 = function(san, suffix, nag, comment, variations) { return node(san, suffix, nag, comment, variations) };
	  var peg$f6 = function(nag) { return nag };
	  var peg$f7 = function(comment) { return comment.replace(/[\r\n]+/g, " ") };
	  var peg$f8 = function(comment) { return comment.trim() };
	  var peg$f9 = function(line) { return line };
	  var peg$f10 = function(result, comment) { return { result, comment } };
	  var peg$currPos = options.peg$currPos | 0;
	  var peg$posDetailsCache = [{ line: 1, column: 1 }];
	  var peg$maxFailPos = peg$currPos;
	  var peg$maxFailExpected = options.peg$maxFailExpected || [];
	  var peg$silentFails = options.peg$silentFails | 0;

	  var peg$result;

	  if (options.startRule) {
	    if (!(options.startRule in peg$startRuleFunctions)) {
	      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	    }

	    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	  }

	  function peg$literalExpectation(text, ignoreCase) {
	    return { type: "literal", text: text, ignoreCase: ignoreCase };
	  }

	  function peg$classExpectation(parts, inverted, ignoreCase) {
	    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
	  }

	  function peg$endExpectation() {
	    return { type: "end" };
	  }

	  function peg$otherExpectation(description) {
	    return { type: "other", description: description };
	  }

	  function peg$computePosDetails(pos) {
	    var details = peg$posDetailsCache[pos];
	    var p;

	    if (details) {
	      return details;
	    } else {
	      if (pos >= peg$posDetailsCache.length) {
	        p = peg$posDetailsCache.length - 1;
	      } else {
	        p = pos;
	        while (!peg$posDetailsCache[--p]) {}
	      }

	      details = peg$posDetailsCache[p];
	      details = {
	        line: details.line,
	        column: details.column
	      };

	      while (p < pos) {
	        if (input.charCodeAt(p) === 10) {
	          details.line++;
	          details.column = 1;
	        } else {
	          details.column++;
	        }

	        p++;
	      }

	      peg$posDetailsCache[pos] = details;

	      return details;
	    }
	  }

	  function peg$computeLocation(startPos, endPos, offset) {
	    var startPosDetails = peg$computePosDetails(startPos);
	    var endPosDetails = peg$computePosDetails(endPos);

	    var res = {
	      source: peg$source,
	      start: {
	        offset: startPos,
	        line: startPosDetails.line,
	        column: startPosDetails.column
	      },
	      end: {
	        offset: endPos,
	        line: endPosDetails.line,
	        column: endPosDetails.column
	      }
	    };
	    return res;
	  }

	  function peg$fail(expected) {
	    if (peg$currPos < peg$maxFailPos) { return; }

	    if (peg$currPos > peg$maxFailPos) {
	      peg$maxFailPos = peg$currPos;
	      peg$maxFailExpected = [];
	    }

	    peg$maxFailExpected.push(expected);
	  }

	  function peg$buildStructuredError(expected, found, location) {
	    return new peg$SyntaxError(
	      peg$SyntaxError.buildMessage(expected, found),
	      expected,
	      found,
	      location
	    );
	  }

	  function peg$parsepgn() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    s1 = peg$parsetagPairSection();
	    s2 = peg$parsemoveTextSection();
	    s0 = peg$f0(s1, s2);

	    return s0;
	  }

	  function peg$parsetagPairSection() {
	    var s0, s1, s2;

	    s0 = peg$currPos;
	    s1 = [];
	    s2 = peg$parsetagPair();
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = peg$parsetagPair();
	    }
	    s2 = peg$parse_();
	    s0 = peg$f1(s1);

	    return s0;
	  }

	  function peg$parsetagPair() {
	    var s0, s2, s4, s6, s7, s8, s10;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    peg$parse_();
	    if (input.charCodeAt(peg$currPos) === 91) {
	      s2 = peg$c0;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e1); }
	    }
	    if (s2 !== peg$FAILED) {
	      peg$parse_();
	      s4 = peg$parsetagName();
	      if (s4 !== peg$FAILED) {
	        peg$parse_();
	        if (input.charCodeAt(peg$currPos) === 34) {
	          s6 = peg$c1;
	          peg$currPos++;
	        } else {
	          s6 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e2); }
	        }
	        if (s6 !== peg$FAILED) {
	          s7 = peg$parsetagValue();
	          if (input.charCodeAt(peg$currPos) === 34) {
	            s8 = peg$c1;
	            peg$currPos++;
	          } else {
	            s8 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$e2); }
	          }
	          if (s8 !== peg$FAILED) {
	            peg$parse_();
	            if (input.charCodeAt(peg$currPos) === 93) {
	              s10 = peg$c2;
	              peg$currPos++;
	            } else {
	              s10 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$e3); }
	            }
	            if (s10 !== peg$FAILED) {
	              s0 = peg$f2(s4, s7);
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      if (peg$silentFails === 0) { peg$fail(peg$e0); }
	    }

	    return s0;
	  }

	  function peg$parsetagName() {
	    var s0, s1, s2;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = input.charAt(peg$currPos);
	    if (peg$r0.test(s2)) {
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e5); }
	    }
	    if (s2 !== peg$FAILED) {
	      while (s2 !== peg$FAILED) {
	        s1.push(s2);
	        s2 = input.charAt(peg$currPos);
	        if (peg$r0.test(s2)) {
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e5); }
	        }
	      }
	    } else {
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      s0 = input.substring(s0, peg$currPos);
	    } else {
	      s0 = s1;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e4); }
	    }

	    return s0;
	  }

	  function peg$parsetagValue() {
	    var s0, s1, s2;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = input.charAt(peg$currPos);
	    if (peg$r1.test(s2)) {
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e7); }
	    }
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = input.charAt(peg$currPos);
	      if (peg$r1.test(s2)) {
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e7); }
	      }
	    }
	    s0 = input.substring(s0, peg$currPos);
	    peg$silentFails--;
	    s1 = peg$FAILED;
	    if (peg$silentFails === 0) { peg$fail(peg$e6); }

	    return s0;
	  }

	  function peg$parsemoveTextSection() {
	    var s0, s1, s3;

	    s0 = peg$currPos;
	    s1 = peg$parseline();
	    peg$parse_();
	    s3 = peg$parsegameTerminationMarker();
	    if (s3 === peg$FAILED) {
	      s3 = null;
	    }
	    peg$parse_();
	    s0 = peg$f3(s1, s3);

	    return s0;
	  }

	  function peg$parseline() {
	    var s0, s1, s2, s3;

	    s0 = peg$currPos;
	    s1 = peg$parsecomment();
	    if (s1 === peg$FAILED) {
	      s1 = null;
	    }
	    s2 = [];
	    s3 = peg$parsemove();
	    while (s3 !== peg$FAILED) {
	      s2.push(s3);
	      s3 = peg$parsemove();
	    }
	    s0 = peg$f4(s1, s2);

	    return s0;
	  }

	  function peg$parsemove() {
	    var s0, s4, s5, s6, s7, s8, s9, s10;

	    s0 = peg$currPos;
	    peg$parse_();
	    peg$parsemoveNumber();
	    peg$parse_();
	    s4 = peg$parsesan();
	    if (s4 !== peg$FAILED) {
	      s5 = peg$parsesuffixAnnotation();
	      if (s5 === peg$FAILED) {
	        s5 = null;
	      }
	      s6 = [];
	      s7 = peg$parsenag();
	      while (s7 !== peg$FAILED) {
	        s6.push(s7);
	        s7 = peg$parsenag();
	      }
	      s7 = peg$parse_();
	      s8 = peg$parsecomment();
	      if (s8 === peg$FAILED) {
	        s8 = null;
	      }
	      s9 = [];
	      s10 = peg$parsevariation();
	      while (s10 !== peg$FAILED) {
	        s9.push(s10);
	        s10 = peg$parsevariation();
	      }
	      s0 = peg$f5(s4, s5, s6, s8, s9);
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }

	    return s0;
	  }

	  function peg$parsemoveNumber() {
	    var s0, s1, s2, s3, s4, s5;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = input.charAt(peg$currPos);
	    if (peg$r2.test(s2)) {
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e9); }
	    }
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      s2 = input.charAt(peg$currPos);
	      if (peg$r2.test(s2)) {
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e9); }
	      }
	    }
	    if (input.charCodeAt(peg$currPos) === 46) {
	      s2 = peg$c3;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e10); }
	    }
	    if (s2 !== peg$FAILED) {
	      s3 = peg$parse_();
	      s4 = [];
	      s5 = input.charAt(peg$currPos);
	      if (peg$r3.test(s5)) {
	        peg$currPos++;
	      } else {
	        s5 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e11); }
	      }
	      while (s5 !== peg$FAILED) {
	        s4.push(s5);
	        s5 = input.charAt(peg$currPos);
	        if (peg$r3.test(s5)) {
	          peg$currPos++;
	        } else {
	          s5 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e11); }
	        }
	      }
	      s1 = [s1, s2, s3, s4];
	      s0 = s1;
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e8); }
	    }

	    return s0;
	  }

	  function peg$parsesan() {
	    var s0, s1, s2, s3, s4, s5;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = peg$currPos;
	    if (input.substr(peg$currPos, 5) === peg$c4) {
	      s2 = peg$c4;
	      peg$currPos += 5;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e13); }
	    }
	    if (s2 === peg$FAILED) {
	      if (input.substr(peg$currPos, 3) === peg$c5) {
	        s2 = peg$c5;
	        peg$currPos += 3;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e14); }
	      }
	      if (s2 === peg$FAILED) {
	        if (input.substr(peg$currPos, 5) === peg$c6) {
	          s2 = peg$c6;
	          peg$currPos += 5;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e15); }
	        }
	        if (s2 === peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c7) {
	            s2 = peg$c7;
	            peg$currPos += 3;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$e16); }
	          }
	          if (s2 === peg$FAILED) {
	            s2 = peg$currPos;
	            s3 = input.charAt(peg$currPos);
	            if (peg$r0.test(s3)) {
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$e5); }
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = [];
	              s5 = input.charAt(peg$currPos);
	              if (peg$r4.test(s5)) {
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$e17); }
	              }
	              if (s5 !== peg$FAILED) {
	                while (s5 !== peg$FAILED) {
	                  s4.push(s5);
	                  s5 = input.charAt(peg$currPos);
	                  if (peg$r4.test(s5)) {
	                    peg$currPos++;
	                  } else {
	                    s5 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$e17); }
	                  }
	                }
	              } else {
	                s4 = peg$FAILED;
	              }
	              if (s4 !== peg$FAILED) {
	                s3 = [s3, s4];
	                s2 = s3;
	              } else {
	                peg$currPos = s2;
	                s2 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s2;
	              s2 = peg$FAILED;
	            }
	          }
	        }
	      }
	    }
	    if (s2 !== peg$FAILED) {
	      s3 = input.charAt(peg$currPos);
	      if (peg$r5.test(s3)) {
	        peg$currPos++;
	      } else {
	        s3 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e18); }
	      }
	      if (s3 === peg$FAILED) {
	        s3 = null;
	      }
	      s2 = [s2, s3];
	      s1 = s2;
	    } else {
	      peg$currPos = s1;
	      s1 = peg$FAILED;
	    }
	    if (s1 !== peg$FAILED) {
	      s0 = input.substring(s0, peg$currPos);
	    } else {
	      s0 = s1;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e12); }
	    }

	    return s0;
	  }

	  function peg$parsesuffixAnnotation() {
	    var s0, s1, s2;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    s1 = [];
	    s2 = input.charAt(peg$currPos);
	    if (peg$r6.test(s2)) {
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e20); }
	    }
	    while (s2 !== peg$FAILED) {
	      s1.push(s2);
	      if (s1.length >= 2) {
	        s2 = peg$FAILED;
	      } else {
	        s2 = input.charAt(peg$currPos);
	        if (peg$r6.test(s2)) {
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e20); }
	        }
	      }
	    }
	    if (s1.length < 1) {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    } else {
	      s0 = s1;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e19); }
	    }

	    return s0;
	  }

	  function peg$parsenag() {
	    var s0, s2, s3, s4, s5;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    peg$parse_();
	    if (input.charCodeAt(peg$currPos) === 36) {
	      s2 = peg$c8;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e22); }
	    }
	    if (s2 !== peg$FAILED) {
	      s3 = peg$currPos;
	      s4 = [];
	      s5 = input.charAt(peg$currPos);
	      if (peg$r2.test(s5)) {
	        peg$currPos++;
	      } else {
	        s5 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e9); }
	      }
	      if (s5 !== peg$FAILED) {
	        while (s5 !== peg$FAILED) {
	          s4.push(s5);
	          s5 = input.charAt(peg$currPos);
	          if (peg$r2.test(s5)) {
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$e9); }
	          }
	        }
	      } else {
	        s4 = peg$FAILED;
	      }
	      if (s4 !== peg$FAILED) {
	        s3 = input.substring(s3, peg$currPos);
	      } else {
	        s3 = s4;
	      }
	      if (s3 !== peg$FAILED) {
	        s0 = peg$f6(s3);
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      if (peg$silentFails === 0) { peg$fail(peg$e21); }
	    }

	    return s0;
	  }

	  function peg$parsecomment() {
	    var s0;

	    s0 = peg$parsebraceComment();
	    if (s0 === peg$FAILED) {
	      s0 = peg$parserestOfLineComment();
	    }

	    return s0;
	  }

	  function peg$parsebraceComment() {
	    var s0, s1, s2, s3, s4;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 123) {
	      s1 = peg$c9;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e24); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$currPos;
	      s3 = [];
	      s4 = input.charAt(peg$currPos);
	      if (peg$r7.test(s4)) {
	        peg$currPos++;
	      } else {
	        s4 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e25); }
	      }
	      while (s4 !== peg$FAILED) {
	        s3.push(s4);
	        s4 = input.charAt(peg$currPos);
	        if (peg$r7.test(s4)) {
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e25); }
	        }
	      }
	      s2 = input.substring(s2, peg$currPos);
	      if (input.charCodeAt(peg$currPos) === 125) {
	        s3 = peg$c10;
	        peg$currPos++;
	      } else {
	        s3 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e26); }
	      }
	      if (s3 !== peg$FAILED) {
	        s0 = peg$f7(s2);
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e23); }
	    }

	    return s0;
	  }

	  function peg$parserestOfLineComment() {
	    var s0, s1, s2, s3, s4;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (input.charCodeAt(peg$currPos) === 59) {
	      s1 = peg$c11;
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e28); }
	    }
	    if (s1 !== peg$FAILED) {
	      s2 = peg$currPos;
	      s3 = [];
	      s4 = input.charAt(peg$currPos);
	      if (peg$r8.test(s4)) {
	        peg$currPos++;
	      } else {
	        s4 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e29); }
	      }
	      while (s4 !== peg$FAILED) {
	        s3.push(s4);
	        s4 = input.charAt(peg$currPos);
	        if (peg$r8.test(s4)) {
	          peg$currPos++;
	        } else {
	          s4 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e29); }
	        }
	      }
	      s2 = input.substring(s2, peg$currPos);
	      s0 = peg$f8(s2);
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e27); }
	    }

	    return s0;
	  }

	  function peg$parsevariation() {
	    var s0, s2, s3, s5;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    peg$parse_();
	    if (input.charCodeAt(peg$currPos) === 40) {
	      s2 = peg$c12;
	      peg$currPos++;
	    } else {
	      s2 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e31); }
	    }
	    if (s2 !== peg$FAILED) {
	      s3 = peg$parseline();
	      if (s3 !== peg$FAILED) {
	        peg$parse_();
	        if (input.charCodeAt(peg$currPos) === 41) {
	          s5 = peg$c13;
	          peg$currPos++;
	        } else {
	          s5 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e32); }
	        }
	        if (s5 !== peg$FAILED) {
	          s0 = peg$f9(s3);
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      if (peg$silentFails === 0) { peg$fail(peg$e30); }
	    }

	    return s0;
	  }

	  function peg$parsegameTerminationMarker() {
	    var s0, s1, s3;

	    peg$silentFails++;
	    s0 = peg$currPos;
	    if (input.substr(peg$currPos, 3) === peg$c14) {
	      s1 = peg$c14;
	      peg$currPos += 3;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e34); }
	    }
	    if (s1 === peg$FAILED) {
	      if (input.substr(peg$currPos, 3) === peg$c15) {
	        s1 = peg$c15;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e35); }
	      }
	      if (s1 === peg$FAILED) {
	        if (input.substr(peg$currPos, 7) === peg$c16) {
	          s1 = peg$c16;
	          peg$currPos += 7;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$e36); }
	        }
	        if (s1 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 42) {
	            s1 = peg$c17;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$e37); }
	          }
	        }
	      }
	    }
	    if (s1 !== peg$FAILED) {
	      peg$parse_();
	      s3 = peg$parsecomment();
	      if (s3 === peg$FAILED) {
	        s3 = null;
	      }
	      s0 = peg$f10(s1, s3);
	    } else {
	      peg$currPos = s0;
	      s0 = peg$FAILED;
	    }
	    peg$silentFails--;
	    if (s0 === peg$FAILED) {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e33); }
	    }

	    return s0;
	  }

	  function peg$parse_() {
	    var s0, s1;

	    peg$silentFails++;
	    s0 = [];
	    s1 = input.charAt(peg$currPos);
	    if (peg$r9.test(s1)) {
	      peg$currPos++;
	    } else {
	      s1 = peg$FAILED;
	      if (peg$silentFails === 0) { peg$fail(peg$e39); }
	    }
	    while (s1 !== peg$FAILED) {
	      s0.push(s1);
	      s1 = input.charAt(peg$currPos);
	      if (peg$r9.test(s1)) {
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$e39); }
	      }
	    }
	    peg$silentFails--;
	    s1 = peg$FAILED;
	    if (peg$silentFails === 0) { peg$fail(peg$e38); }

	    return s0;
	  }

	  peg$result = peg$startRuleFunction();

	  if (options.peg$library) {
	    return /** @type {any} */ ({
	      peg$result,
	      peg$currPos,
	      peg$FAILED,
	      peg$maxFailExpected,
	      peg$maxFailPos
	    });
	  }
	  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	    return peg$result;
	  } else {
	    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	      peg$fail(peg$endExpectation());
	    }

	    throw peg$buildStructuredError(
	      peg$maxFailExpected,
	      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
	      peg$maxFailPos < input.length
	        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
	        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
	    );
	  }
	}

	pgn_1 = {
	  StartRules: ["pgn"],
	  SyntaxError: peg$SyntaxError,
	  parse: peg$parse
	};
	return pgn_1;
}

var pgnExports = requirePgn();

/**
 * @license
 * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
const MASK64 = 0xffffffffffffffffn;
function rotl(x, k) {
    return ((x << k) | (x >> (64n - k))) & 0xffffffffffffffffn;
}
function wrappingMul(x, y) {
    return (x * y) & MASK64;
}
// xoroshiro128**
function xoroshiro128(state) {
    return function () {
        let s0 = BigInt(state & MASK64);
        let s1 = BigInt((state >> 64n) & MASK64);
        const result = wrappingMul(rotl(wrappingMul(s0, 5n), 7n), 9n);
        s1 ^= s0;
        s0 = (rotl(s0, 24n) ^ s1 ^ (s1 << 16n)) & MASK64;
        s1 = rotl(s1, 37n);
        state = (s1 << 64n) | s0;
        return result;
    };
}
const rand = xoroshiro128(0xa187eb39cdcaed8f31c4b365b102e01en);
const PIECE_KEYS = Array.from({ length: 2 }, () => Array.from({ length: 6 }, () => Array.from({ length: 128 }, () => rand())));
const EP_KEYS = Array.from({ length: 8 }, () => rand());
const CASTLING_KEYS = Array.from({ length: 16 }, () => rand());
const SIDE_KEY = rand();
const WHITE = 'w';
const BLACK = 'b';
const PAWN = 'p';
const KNIGHT = 'n';
const BISHOP = 'b';
const ROOK = 'r';
const QUEEN = 'q';
const KING = 'k';
const DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';
class Move {
    color;
    from;
    to;
    piece;
    captured;
    promotion;
    /**
     * @deprecated This field is deprecated and will be removed in version 2.0.0.
     * Please use move descriptor functions instead: `isCapture`, `isPromotion`,
     * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and
     * `isBigPawn`
     */
    flags;
    san;
    lan;
    before;
    after;
    constructor(chess, internal) {
        const { color, piece, from, to, flags, captured, promotion } = internal;
        const fromAlgebraic = algebraic(from);
        const toAlgebraic = algebraic(to);
        this.color = color;
        this.piece = piece;
        this.from = fromAlgebraic;
        this.to = toAlgebraic;
        /*
         * HACK: The chess['_method']() calls below invoke private methods in the
         * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the
         * code cleaner elsewhere.
         */
        this.san = chess['_moveToSan'](internal, chess['_moves']({ legal: true }));
        this.lan = fromAlgebraic + toAlgebraic;
        this.before = chess.fen();
        // Generate the FEN for the 'after' key
        chess['_makeMove'](internal);
        this.after = chess.fen();
        chess['_undoMove']();
        // Build the text representation of the move flags
        this.flags = '';
        for (const flag in BITS) {
            if (BITS[flag] & flags) {
                this.flags += FLAGS[flag];
            }
        }
        if (captured) {
            this.captured = captured;
        }
        if (promotion) {
            this.promotion = promotion;
            this.lan += promotion;
        }
    }
    isCapture() {
        return this.flags.indexOf(FLAGS['CAPTURE']) > -1;
    }
    isPromotion() {
        return this.flags.indexOf(FLAGS['PROMOTION']) > -1;
    }
    isEnPassant() {
        return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1;
    }
    isKingsideCastle() {
        return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1;
    }
    isQueensideCastle() {
        return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1;
    }
    isBigPawn() {
        return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1;
    }
}
const EMPTY = -1;
const FLAGS = {
    NORMAL: 'n',
    CAPTURE: 'c',
    BIG_PAWN: 'b',
    EP_CAPTURE: 'e',
    PROMOTION: 'p',
    KSIDE_CASTLE: 'k',
    QSIDE_CASTLE: 'q',
};
const BITS = {
    NORMAL: 1,
    CAPTURE: 2,
    BIG_PAWN: 4,
    EP_CAPTURE: 8,
    PROMOTION: 16,
    KSIDE_CASTLE: 32,
    QSIDE_CASTLE: 64,
};
/* eslint-disable @typescript-eslint/naming-convention */
// these are required, according to spec
const SEVEN_TAG_ROSTER = {
    Event: '?',
    Site: '?',
    Date: '????.??.??',
    Round: '?',
    White: '?',
    Black: '?',
    Result: '*',
};
/**
 * These nulls are placeholders to fix the order of tags (as they appear in PGN spec); null values will be
 * eliminated in getHeaders()
 */
const SUPLEMENTAL_TAGS = {
    WhiteTitle: null,
    BlackTitle: null,
    WhiteElo: null,
    BlackElo: null,
    WhiteUSCF: null,
    BlackUSCF: null,
    WhiteNA: null,
    BlackNA: null,
    WhiteType: null,
    BlackType: null,
    EventDate: null,
    EventSponsor: null,
    Section: null,
    Stage: null,
    Board: null,
    Opening: null,
    Variation: null,
    SubVariation: null,
    ECO: null,
    NIC: null,
    Time: null,
    UTCTime: null,
    UTCDate: null,
    TimeControl: null,
    SetUp: null,
    FEN: null,
    Termination: null,
    Annotator: null,
    Mode: null,
    PlyCount: null,
};
const HEADER_TEMPLATE = {
    ...SEVEN_TAG_ROSTER,
    ...SUPLEMENTAL_TAGS,
};
/* eslint-enable @typescript-eslint/naming-convention */
/*
 * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM
 * ----------------------------------------------------------------------------
 * From https://github.com/jhlywa/chess.js/issues/230
 *
 * A lot of people are confused when they first see the internal representation
 * of chess.js. It uses the 0x88 Move Generation Algorithm which internally
 * stores the board as an 8x16 array. This is purely for efficiency but has a
 * couple of interesting benefits:
 *
 * 1. 0x88 offers a very inexpensive "off the board" check. Bitwise AND (&) any
 *    square with 0x88, if the result is non-zero then the square is off the
 *    board. For example, assuming a knight square A8 (0 in 0x88 notation),
 *    there are 8 possible directions in which the knight can move. These
 *    directions are relative to the 8x16 board and are stored in the
 *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two
 *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88
 *    (because of two-complement representation of -18). The non-zero result
 *    means the square is off the board and the move is illegal. Take the
 *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero
 *    means the square is on the board.
 *
 * 2. The relative distance (or difference) between two squares on a 8x16 board
 *    is unique and can be used to inexpensively determine if a piece on a
 *    square can attack any other arbitrary square. For example, let's see if a
 *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is
 *    -80. We add 119 to make the ATTACKS array index non-negative (because the
 *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a
 *    bitmask of pieces that can attack from that distance and direction.
 *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the
 *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn
 *    example, we would check to see if 24 & 0x1 is non-zero, which it is
 *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a
 *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that
 *    there are no blocking pieces between E7 and E2. That's where the RAYS
 *    array comes in. It provides an offset (in this case 16) to add to E7 (20)
 *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.
 */
// prettier-ignore
// eslint-disable-next-line
const Ox88 = {
    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,
    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,
    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,
    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,
    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,
    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,
    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,
    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119
};
const PAWN_OFFSETS = {
    b: [16, 32, 17, 15],
    w: [-16, -32, -17, -15],
};
const PIECE_OFFSETS = {
    n: [-18, -33, -31, -14, 18, 33, 31, 14],
    b: [-17, -15, 17, 15],
    r: [-16, 1, 16, -1],
    q: [-17, -16, -15, 1, 17, 16, 15, -1],
    k: [-17, -16, -15, 1, 17, 16, 15, -1],
};
// prettier-ignore
const ATTACKS = [
    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,
    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,
    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,
    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,
    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,
    24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,
    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,
    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,
    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,
    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,
    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20
];
// prettier-ignore
const RAYS = [
    17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,
    0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,
    0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,
    0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,
    0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,
    0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,
    0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,
    0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,
    0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,
    -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17
];
const PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 };
const SYMBOLS = 'pnbrqkPNBRQK';
const PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];
const RANK_1 = 7;
const RANK_2 = 6;
/*
 * const RANK_3 = 5
 * const RANK_4 = 4
 * const RANK_5 = 3
 * const RANK_6 = 2
 */
const RANK_7 = 1;
const RANK_8 = 0;
const SIDES = {
    [KING]: BITS.KSIDE_CASTLE,
    [QUEEN]: BITS.QSIDE_CASTLE,
};
const ROOKS = {
    w: [
        { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },
        { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },
    ],
    b: [
        { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },
        { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },
    ],
};
const SECOND_RANK = { b: RANK_7, w: RANK_2 };
// Extracts the zero-based rank of an 0x88 square.
function rank(square) {
    return square >> 4;
}
// Extracts the zero-based file of an 0x88 square.
function file(square) {
    return square & 0xf;
}
function isDigit(c) {
    return '0123456789'.indexOf(c) !== -1;
}
// Converts a 0x88 square to algebraic notation.
function algebraic(square) {
    const f = file(square);
    const r = rank(square);
    return ('abcdefgh'.substring(f, f + 1) +
        '87654321'.substring(r, r + 1));
}
function swapColor(color) {
    return color === WHITE ? BLACK : WHITE;
}
function validateFen(fen) {
    // 1st criterion: 6 space-seperated fields?
    const tokens = fen.split(/\s+/);
    if (tokens.length !== 6) {
        return {
            ok: false,
            error: 'Invalid FEN: must contain six space-delimited fields',
        };
    }
    // 2nd criterion: move number field is a integer value > 0?
    const moveNumber = parseInt(tokens[5], 10);
    if (isNaN(moveNumber) || moveNumber <= 0) {
        return {
            ok: false,
            error: 'Invalid FEN: move number must be a positive integer',
        };
    }
    // 3rd criterion: half move counter is an integer >= 0?
    const halfMoves = parseInt(tokens[4], 10);
    if (isNaN(halfMoves) || halfMoves < 0) {
        return {
            ok: false,
            error: 'Invalid FEN: half move counter number must be a non-negative integer',
        };
    }
    // 4th criterion: 4th field is a valid e.p.-string?
    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {
        return { ok: false, error: 'Invalid FEN: en-passant square is invalid' };
    }
    // 5th criterion: 3th field is a valid castle-string?
    if (/[^kKqQ-]/.test(tokens[2])) {
        return { ok: false, error: 'Invalid FEN: castling availability is invalid' };
    }
    // 6th criterion: 2nd field is "w" (white) or "b" (black)?
    if (!/^(w|b)$/.test(tokens[1])) {
        return { ok: false, error: 'Invalid FEN: side-to-move is invalid' };
    }
    // 7th criterion: 1st field contains 8 rows?
    const rows = tokens[0].split('/');
    if (rows.length !== 8) {
        return {
            ok: false,
            error: "Invalid FEN: piece data does not contain 8 '/'-delimited rows",
        };
    }
    // 8th criterion: every row is valid?
    for (let i = 0; i < rows.length; i++) {
        // check for right sum of fields AND not two numbers in succession
        let sumFields = 0;
        let previousWasNumber = false;
        for (let k = 0; k < rows[i].length; k++) {
            if (isDigit(rows[i][k])) {
                if (previousWasNumber) {
                    return {
                        ok: false,
                        error: 'Invalid FEN: piece data is invalid (consecutive number)',
                    };
                }
                sumFields += parseInt(rows[i][k], 10);
                previousWasNumber = true;
            }
            else {
                if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {
                    return {
                        ok: false,
                        error: 'Invalid FEN: piece data is invalid (invalid piece)',
                    };
                }
                sumFields += 1;
                previousWasNumber = false;
            }
        }
        if (sumFields !== 8) {
            return {
                ok: false,
                error: 'Invalid FEN: piece data is invalid (too many squares in rank)',
            };
        }
    }
    // 9th criterion: is en-passant square legal?
    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||
        (tokens[3][1] == '6' && tokens[1] == 'b')) {
        return { ok: false, error: 'Invalid FEN: illegal en-passant square' };
    }
    // 10th criterion: does chess position contain exact two kings?
    const kings = [
        { color: 'white', regex: /K/g },
        { color: 'black', regex: /k/g },
    ];
    for (const { color, regex } of kings) {
        if (!regex.test(tokens[0])) {
            return { ok: false, error: `Invalid FEN: missing ${color} king` };
        }
        if ((tokens[0].match(regex) || []).length > 1) {
            return { ok: false, error: `Invalid FEN: too many ${color} kings` };
        }
    }
    // 11th criterion: are any pawns on the first or eighth rows?
    if (Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')) {
        return {
            ok: false,
            error: 'Invalid FEN: some pawns are on the edge rows',
        };
    }
    return { ok: true };
}
// this function is used to uniquely identify ambiguous moves
function getDisambiguator(move, moves) {
    const from = move.from;
    const to = move.to;
    const piece = move.piece;
    let ambiguities = 0;
    let sameRank = 0;
    let sameFile = 0;
    for (let i = 0, len = moves.length; i < len; i++) {
        const ambigFrom = moves[i].from;
        const ambigTo = moves[i].to;
        const ambigPiece = moves[i].piece;
        /*
         * if a move of the same piece type ends on the same to square, we'll need
         * to add a disambiguator to the algebraic notation
         */
        if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {
            ambiguities++;
            if (rank(from) === rank(ambigFrom)) {
                sameRank++;
            }
            if (file(from) === file(ambigFrom)) {
                sameFile++;
            }
        }
    }
    if (ambiguities > 0) {
        if (sameRank > 0 && sameFile > 0) {
            /*
             * if there exists a similar moving piece on the same rank and file as
             * the move in question, use the square as the disambiguator
             */
            return algebraic(from);
        }
        else if (sameFile > 0) {
            /*
             * if the moving piece rests on the same file, use the rank symbol as the
             * disambiguator
             */
            return algebraic(from).charAt(1);
        }
        else {
            // else use the file symbol
            return algebraic(from).charAt(0);
        }
    }
    return '';
}
function addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {
    const r = rank(to);
    if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {
        for (let i = 0; i < PROMOTIONS.length; i++) {
            const promotion = PROMOTIONS[i];
            moves.push({
                color,
                from,
                to,
                piece,
                captured,
                promotion,
                flags: flags | BITS.PROMOTION,
            });
        }
    }
    else {
        moves.push({
            color,
            from,
            to,
            piece,
            captured,
            flags,
        });
    }
}
function inferPieceType(san) {
    let pieceType = san.charAt(0);
    if (pieceType >= 'a' && pieceType <= 'h') {
        const matches = san.match(/[a-h]\d.*[a-h]\d/);
        if (matches) {
            return undefined;
        }
        return PAWN;
    }
    pieceType = pieceType.toLowerCase();
    if (pieceType === 'o') {
        return KING;
    }
    return pieceType;
}
// parses all of the decorators out of a SAN string
function strippedSan(move) {
    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');
}
class Chess {
    _board = new Array(128);
    _turn = WHITE;
    _header = {};
    _kings = { w: EMPTY, b: EMPTY };
    _epSquare = -1;
    _halfMoves = 0;
    _moveNumber = 0;
    _history = [];
    _comments = {};
    _castling = { w: 0, b: 0 };
    _hash = 0n;
    // tracks number of times a position has been seen for repetition checking
    _positionCount = new Map();
    constructor(fen = DEFAULT_POSITION, { skipValidation = false } = {}) {
        this.load(fen, { skipValidation });
    }
    clear({ preserveHeaders = false } = {}) {
        this._board = new Array(128);
        this._kings = { w: EMPTY, b: EMPTY };
        this._turn = WHITE;
        this._castling = { w: 0, b: 0 };
        this._epSquare = EMPTY;
        this._halfMoves = 0;
        this._moveNumber = 1;
        this._history = [];
        this._comments = {};
        this._header = preserveHeaders ? this._header : { ...HEADER_TEMPLATE };
        this._hash = this._computeHash();
        this._positionCount = new Map();
        /*
         * Delete the SetUp and FEN headers (if preserved), the board is empty and
         * these headers don't make sense in this state. They'll get added later
         * via .load() or .put()
         */
        this._header['SetUp'] = null;
        this._header['FEN'] = null;
    }
    load(fen, { skipValidation = false, preserveHeaders = false } = {}) {
        let tokens = fen.split(/\s+/);
        // append commonly omitted fen tokens
        if (tokens.length >= 2 && tokens.length < 6) {
            const adjustments = ['-', '-', '0', '1'];
            fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');
        }
        tokens = fen.split(/\s+/);
        if (!skipValidation) {
            const { ok, error } = validateFen(fen);
            if (!ok) {
                throw new Error(error);
            }
        }
        const position = tokens[0];
        let square = 0;
        this.clear({ preserveHeaders });
        for (let i = 0; i < position.length; i++) {
            const piece = position.charAt(i);
            if (piece === '/') {
                square += 8;
            }
            else if (isDigit(piece)) {
                square += parseInt(piece, 10);
            }
            else {
                const color = piece < 'a' ? WHITE : BLACK;
                this._put({ type: piece.toLowerCase(), color }, algebraic(square));
                square++;
            }
        }
        this._turn = tokens[1];
        if (tokens[2].indexOf('K') > -1) {
            this._castling.w |= BITS.KSIDE_CASTLE;
        }
        if (tokens[2].indexOf('Q') > -1) {
            this._castling.w |= BITS.QSIDE_CASTLE;
        }
        if (tokens[2].indexOf('k') > -1) {
            this._castling.b |= BITS.KSIDE_CASTLE;
        }
        if (tokens[2].indexOf('q') > -1) {
            this._castling.b |= BITS.QSIDE_CASTLE;
        }
        this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];
        this._halfMoves = parseInt(tokens[4], 10);
        this._moveNumber = parseInt(tokens[5], 10);
        this._hash = this._computeHash();
        this._updateSetup(fen);
        this._incPositionCount();
    }
    fen({ forceEnpassantSquare = false, } = {}) {
        let empty = 0;
        let fen = '';
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            if (this._board[i]) {
                if (empty > 0) {
                    fen += empty;
                    empty = 0;
                }
                const { color, type: piece } = this._board[i];
                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();
            }
            else {
                empty++;
            }
            if ((i + 1) & 0x88) {
                if (empty > 0) {
                    fen += empty;
                }
                if (i !== Ox88.h1) {
                    fen += '/';
                }
                empty = 0;
                i += 8;
            }
        }
        let castling = '';
        if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {
            castling += 'K';
        }
        if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {
            castling += 'Q';
        }
        if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {
            castling += 'k';
        }
        if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {
            castling += 'q';
        }
        // do we have an empty castling flag?
        castling = castling || '-';
        let epSquare = '-';
        /*
         * only print the ep square if en passant is a valid move (pawn is present
         * and ep capture is not pinned)
         */
        if (this._epSquare !== EMPTY) {
            if (forceEnpassantSquare) {
                epSquare = algebraic(this._epSquare);
            }
            else {
                const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);
                const squares = [bigPawnSquare + 1, bigPawnSquare - 1];
                for (const square of squares) {
                    // is the square off the board?
                    if (square & 0x88) {
                        continue;
                    }
                    const color = this._turn;
                    // is there a pawn that can capture the epSquare?
                    if (this._board[square]?.color === color &&
                        this._board[square]?.type === PAWN) {
                        // if the pawn makes an ep capture, does it leave its king in check?
                        this._makeMove({
                            color,
                            from: square,
                            to: this._epSquare,
                            piece: PAWN,
                            captured: PAWN,
                            flags: BITS.EP_CAPTURE,
                        });
                        const isLegal = !this._isKingAttacked(color);
                        this._undoMove();
                        // if ep is legal, break and set the ep square in the FEN output
                        if (isLegal) {
                            epSquare = algebraic(this._epSquare);
                            break;
                        }
                    }
                }
            }
        }
        return [
            fen,
            this._turn,
            castling,
            epSquare,
            this._halfMoves,
            this._moveNumber,
        ].join(' ');
    }
    _pieceKey(i) {
        if (!this._board[i]) {
            return 0n;
        }
        const { color, type } = this._board[i];
        const colorIndex = {
            w: 0,
            b: 1,
        }[color];
        const typeIndex = {
            p: 0,
            n: 1,
            b: 2,
            r: 3,
            q: 4,
            k: 5,
        }[type];
        return PIECE_KEYS[colorIndex][typeIndex][i];
    }
    _epKey() {
        return this._epSquare === EMPTY ? 0n : EP_KEYS[this._epSquare & 7];
    }
    _castlingKey() {
        const index = (this._castling.w >> 5) | (this._castling.b >> 3);
        return CASTLING_KEYS[index];
    }
    _computeHash() {
        let hash = 0n;
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            // did we run off the end of the board
            if (i & 0x88) {
                i += 7;
                continue;
            }
            if (this._board[i]) {
                hash ^= this._pieceKey(i);
            }
        }
        hash ^= this._epKey();
        hash ^= this._castlingKey();
        if (this._turn === 'b') {
            hash ^= SIDE_KEY;
        }
        return hash;
    }
    /*
     * Called when the initial board setup is changed with put() or remove().
     * modifies the SetUp and FEN properties of the header object. If the FEN
     * is equal to the default position, the SetUp and FEN are deleted the setup
     * is only updated if history.length is zero, ie moves haven't been made.
     */
    _updateSetup(fen) {
        if (this._history.length > 0)
            return;
        if (fen !== DEFAULT_POSITION) {
            this._header['SetUp'] = '1';
            this._header['FEN'] = fen;
        }
        else {
            this._header['SetUp'] = null;
            this._header['FEN'] = null;
        }
    }
    reset() {
        this.load(DEFAULT_POSITION);
    }
    get(square) {
        return this._board[Ox88[square]];
    }
    findPiece(piece) {
        const squares = [];
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            // did we run off the end of the board
            if (i & 0x88) {
                i += 7;
                continue;
            }
            // if empty square or wrong color
            if (!this._board[i] || this._board[i]?.color !== piece.color) {
                continue;
            }
            // check if square contains the requested piece
            if (this._board[i].color === piece.color &&
                this._board[i].type === piece.type) {
                squares.push(algebraic(i));
            }
        }
        return squares;
    }
    put({ type, color }, square) {
        if (this._put({ type, color }, square)) {
            this._updateCastlingRights();
            this._updateEnPassantSquare();
            this._updateSetup(this.fen());
            return true;
        }
        return false;
    }
    _set(sq, piece) {
        this._hash ^= this._pieceKey(sq);
        this._board[sq] = piece;
        this._hash ^= this._pieceKey(sq);
    }
    _put({ type, color }, square) {
        // check for piece
        if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {
            return false;
        }
        // check for valid square
        if (!(square in Ox88)) {
            return false;
        }
        const sq = Ox88[square];
        // don't let the user place more than one king
        if (type == KING &&
            !(this._kings[color] == EMPTY || this._kings[color] == sq)) {
            return false;
        }
        const currentPieceOnSquare = this._board[sq];
        // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`
        if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {
            this._kings[currentPieceOnSquare.color] = EMPTY;
        }
        this._set(sq, { type: type, color: color });
        if (type === KING) {
            this._kings[color] = sq;
        }
        return true;
    }
    _clear(sq) {
        this._hash ^= this._pieceKey(sq);
        delete this._board[sq];
    }
    remove(square) {
        const piece = this.get(square);
        this._clear(Ox88[square]);
        if (piece && piece.type === KING) {
            this._kings[piece.color] = EMPTY;
        }
        this._updateCastlingRights();
        this._updateEnPassantSquare();
        this._updateSetup(this.fen());
        return piece;
    }
    _updateCastlingRights() {
        this._hash ^= this._castlingKey();
        const whiteKingInPlace = this._board[Ox88.e1]?.type === KING &&
            this._board[Ox88.e1]?.color === WHITE;
        const blackKingInPlace = this._board[Ox88.e8]?.type === KING &&
            this._board[Ox88.e8]?.color === BLACK;
        if (!whiteKingInPlace ||
            this._board[Ox88.a1]?.type !== ROOK ||
            this._board[Ox88.a1]?.color !== WHITE) {
            this._castling.w &= -65;
        }
        if (!whiteKingInPlace ||
            this._board[Ox88.h1]?.type !== ROOK ||
            this._board[Ox88.h1]?.color !== WHITE) {
            this._castling.w &= -33;
        }
        if (!blackKingInPlace ||
            this._board[Ox88.a8]?.type !== ROOK ||
            this._board[Ox88.a8]?.color !== BLACK) {
            this._castling.b &= -65;
        }
        if (!blackKingInPlace ||
            this._board[Ox88.h8]?.type !== ROOK ||
            this._board[Ox88.h8]?.color !== BLACK) {
            this._castling.b &= -33;
        }
        this._hash ^= this._castlingKey();
    }
    _updateEnPassantSquare() {
        if (this._epSquare === EMPTY) {
            return;
        }
        const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);
        const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);
        const attackers = [currentSquare + 1, currentSquare - 1];
        if (this._board[startSquare] !== null ||
            this._board[this._epSquare] !== null ||
            this._board[currentSquare]?.color !== swapColor(this._turn) ||
            this._board[currentSquare]?.type !== PAWN) {
            this._hash ^= this._epKey();
            this._epSquare = EMPTY;
            return;
        }
        const canCapture = (square) => !(square & 0x88) &&
            this._board[square]?.color === this._turn &&
            this._board[square]?.type === PAWN;
        if (!attackers.some(canCapture)) {
            this._hash ^= this._epKey();
            this._epSquare = EMPTY;
        }
    }
    _attacked(color, square, verbose) {
        const attackers = [];
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            // did we run off the end of the board
            if (i & 0x88) {
                i += 7;
                continue;
            }
            // if empty square or wrong color
            if (this._board[i] === undefined || this._board[i].color !== color) {
                continue;
            }
            const piece = this._board[i];
            const difference = i - square;
            // skip - to/from square are the same
            if (difference === 0) {
                continue;
            }
            const index = difference + 119;
            if (ATTACKS[index] & PIECE_MASKS[piece.type]) {
                if (piece.type === PAWN) {
                    if ((difference > 0 && piece.color === WHITE) ||
                        (difference <= 0 && piece.color === BLACK)) {
                        if (!verbose) {
                            return true;
                        }
                        else {
                            attackers.push(algebraic(i));
                        }
                    }
                    continue;
                }
                // if the piece is a knight or a king
                if (piece.type === 'n' || piece.type === 'k') {
                    if (!verbose) {
                        return true;
                    }
                    else {
                        attackers.push(algebraic(i));
                        continue;
                    }
                }
                const offset = RAYS[index];
                let j = i + offset;
                let blocked = false;
                while (j !== square) {
                    if (this._board[j] != null) {
                        blocked = true;
                        break;
                    }
                    j += offset;
                }
                if (!blocked) {
                    if (!verbose) {
                        return true;
                    }
                    else {
                        attackers.push(algebraic(i));
                        continue;
                    }
                }
            }
        }
        if (verbose) {
            return attackers;
        }
        else {
            return false;
        }
    }
    attackers(square, attackedBy) {
        if (!attackedBy) {
            return this._attacked(this._turn, Ox88[square], true);
        }
        else {
            return this._attacked(attackedBy, Ox88[square], true);
        }
    }
    _isKingAttacked(color) {
        const square = this._kings[color];
        return square === -1 ? false : this._attacked(swapColor(color), square);
    }
    hash() {
        return this._hash.toString(16);
    }
    isAttacked(square, attackedBy) {
        return this._attacked(attackedBy, Ox88[square]);
    }
    isCheck() {
        return this._isKingAttacked(this._turn);
    }
    inCheck() {
        return this.isCheck();
    }
    isCheckmate() {
        return this.isCheck() && this._moves().length === 0;
    }
    isStalemate() {
        return !this.isCheck() && this._moves().length === 0;
    }
    isInsufficientMaterial() {
        /*
         * k.b. vs k.b. (of opposite colors) with mate in 1:
         * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1
         *
         * k.b. vs k.n. with mate in 1:
         * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1
         */
        const pieces = {
            b: 0,
            n: 0,
            r: 0,
            q: 0,
            k: 0,
            p: 0,
        };
        const bishops = [];
        let numPieces = 0;
        let squareColor = 0;
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            squareColor = (squareColor + 1) % 2;
            if (i & 0x88) {
                i += 7;
                continue;
            }
            const piece = this._board[i];
            if (piece) {
                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;
                if (piece.type === BISHOP) {
                    bishops.push(squareColor);
                }
                numPieces++;
            }
        }
        // k vs. k
        if (numPieces === 2) {
            return true;
        }
        else if (
        // k vs. kn .... or .... k vs. kb
        numPieces === 3 &&
            (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {
            return true;
        }
        else if (numPieces === pieces[BISHOP] + 2) {
            // kb vs. kb where any number of bishops are all on the same color
            let sum = 0;
            const len = bishops.length;
            for (let i = 0; i < len; i++) {
                sum += bishops[i];
            }
            if (sum === 0 || sum === len) {
                return true;
            }
        }
        return false;
    }
    isThreefoldRepetition() {
        return this._getPositionCount(this._hash) >= 3;
    }
    isDrawByFiftyMoves() {
        return this._halfMoves >= 100; // 50 moves per side = 100 half moves
    }
    isDraw() {
        return (this.isDrawByFiftyMoves() ||
            this.isStalemate() ||
            this.isInsufficientMaterial() ||
            this.isThreefoldRepetition());
    }
    isGameOver() {
        return this.isCheckmate() || this.isDraw();
    }
    moves({ verbose = false, square = undefined, piece = undefined, } = {}) {
        const moves = this._moves({ square, piece });
        if (verbose) {
            return moves.map((move) => new Move(this, move));
        }
        else {
            return moves.map((move) => this._moveToSan(move, moves));
        }
    }
    _moves({ legal = true, piece = undefined, square = undefined, } = {}) {
        const forSquare = square ? square.toLowerCase() : undefined;
        const forPiece = piece?.toLowerCase();
        const moves = [];
        const us = this._turn;
        const them = swapColor(us);
        let firstSquare = Ox88.a8;
        let lastSquare = Ox88.h1;
        let singleSquare = false;
        // are we generating moves for a single square?
        if (forSquare) {
            // illegal square, return empty moves
            if (!(forSquare in Ox88)) {
                return [];
            }
            else {
                firstSquare = lastSquare = Ox88[forSquare];
                singleSquare = true;
            }
        }
        for (let from = firstSquare; from <= lastSquare; from++) {
            // did we run off the end of the board
            if (from & 0x88) {
                from += 7;
                continue;
            }
            // empty square or opponent, skip
            if (!this._board[from] || this._board[from].color === them) {
                continue;
            }
            const { type } = this._board[from];
            let to;
            if (type === PAWN) {
                if (forPiece && forPiece !== type)
                    continue;
                // single square, non-capturing
                to = from + PAWN_OFFSETS[us][0];
                if (!this._board[to]) {
                    addMove(moves, us, from, to, PAWN);
                    // double square
                    to = from + PAWN_OFFSETS[us][1];
                    if (SECOND_RANK[us] === rank(from) && !this._board[to]) {
                        addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);
                    }
                }
                // pawn captures
                for (let j = 2; j < 4; j++) {
                    to = from + PAWN_OFFSETS[us][j];
                    if (to & 0x88)
                        continue;
                    if (this._board[to]?.color === them) {
                        addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);
                    }
                    else if (to === this._epSquare) {
                        addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);
                    }
                }
            }
            else {
                if (forPiece && forPiece !== type)
                    continue;
                for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {
                    const offset = PIECE_OFFSETS[type][j];
                    to = from;
                    while (true) {
                        to += offset;
                        if (to & 0x88)
                            break;
                        if (!this._board[to]) {
                            addMove(moves, us, from, to, type);
                        }
                        else {
                            // own color, stop loop
                            if (this._board[to].color === us)
                                break;
                            addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);
                            break;
                        }
                        /* break, if knight or king */
                        if (type === KNIGHT || type === KING)
                            break;
                    }
                }
            }
        }
        /*
         * check for castling if we're:
         *   a) generating all moves, or
         *   b) doing single square move generation on the king's square
         */
        if (forPiece === undefined || forPiece === KING) {
            if (!singleSquare || lastSquare === this._kings[us]) {
                // king-side castling
                if (this._castling[us] & BITS.KSIDE_CASTLE) {
                    const castlingFrom = this._kings[us];
                    const castlingTo = castlingFrom + 2;
                    if (!this._board[castlingFrom + 1] &&
                        !this._board[castlingTo] &&
                        !this._attacked(them, this._kings[us]) &&
                        !this._attacked(them, castlingFrom + 1) &&
                        !this._attacked(them, castlingTo)) {
                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);
                    }
                }
                // queen-side castling
                if (this._castling[us] & BITS.QSIDE_CASTLE) {
                    const castlingFrom = this._kings[us];
                    const castlingTo = castlingFrom - 2;
                    if (!this._board[castlingFrom - 1] &&
                        !this._board[castlingFrom - 2] &&
                        !this._board[castlingFrom - 3] &&
                        !this._attacked(them, this._kings[us]) &&
                        !this._attacked(them, castlingFrom - 1) &&
                        !this._attacked(them, castlingTo)) {
                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);
                    }
                }
            }
        }
        /*
         * return all pseudo-legal moves (this includes moves that allow the king
         * to be captured)
         */
        if (!legal || this._kings[us] === -1) {
            return moves;
        }
        // filter out illegal moves
        const legalMoves = [];
        for (let i = 0, len = moves.length; i < len; i++) {
            this._makeMove(moves[i]);
            if (!this._isKingAttacked(us)) {
                legalMoves.push(moves[i]);
            }
            this._undoMove();
        }
        return legalMoves;
    }
    move(move, { strict = false } = {}) {
        /*
         * The move function can be called with in the following parameters:
         *
         * .move('Nxb7')       <- argument is a case-sensitive SAN string
         *
         * .move({ from: 'h7', <- argument is a move object
         *         to :'h8',
         *         promotion: 'q' })
         *
         *
         * An optional strict argument may be supplied to tell chess.js to
         * strictly follow the SAN specification.
         */
        let moveObj = null;
        if (typeof move === 'string') {
            moveObj = this._moveFromSan(move, strict);
        }
        else if (typeof move === 'object') {
            const moves = this._moves();
            // convert the pretty move object to an ugly move object
            for (let i = 0, len = moves.length; i < len; i++) {
                if (move.from === algebraic(moves[i].from) &&
                    move.to === algebraic(moves[i].to) &&
                    (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {
                    moveObj = moves[i];
                    break;
                }
            }
        }
        // failed to find move
        if (!moveObj) {
            if (typeof move === 'string') {
                throw new Error(`Invalid move: ${move}`);
            }
            else {
                throw new Error(`Invalid move: ${JSON.stringify(move)}`);
            }
        }
        /*
         * need to make a copy of move because we can't generate SAN after the move
         * is made
         */
        const prettyMove = new Move(this, moveObj);
        this._makeMove(moveObj);
        this._incPositionCount();
        return prettyMove;
    }
    _push(move) {
        this._history.push({
            move,
            kings: { b: this._kings.b, w: this._kings.w },
            turn: this._turn,
            castling: { b: this._castling.b, w: this._castling.w },
            epSquare: this._epSquare,
            halfMoves: this._halfMoves,
            moveNumber: this._moveNumber,
        });
    }
    _movePiece(from, to) {
        this._hash ^= this._pieceKey(from);
        this._board[to] = this._board[from];
        delete this._board[from];
        this._hash ^= this._pieceKey(to);
    }
    _makeMove(move) {
        const us = this._turn;
        const them = swapColor(us);
        this._push(move);
        this._hash ^= this._epKey();
        this._hash ^= this._castlingKey();
        if (move.captured) {
            this._hash ^= this._pieceKey(move.to);
        }
        this._movePiece(move.from, move.to);
        // if ep capture, remove the captured pawn
        if (move.flags & BITS.EP_CAPTURE) {
            if (this._turn === BLACK) {
                this._clear(move.to - 16);
            }
            else {
                this._clear(move.to + 16);
            }
        }
        // if pawn promotion, replace with new piece
        if (move.promotion) {
            this._clear(move.to);
            this._set(move.to, { type: move.promotion, color: us });
        }
        // if we moved the king
        if (this._board[move.to].type === KING) {
            this._kings[us] = move.to;
            // if we castled, move the rook next to the king
            if (move.flags & BITS.KSIDE_CASTLE) {
                const castlingTo = move.to - 1;
                const castlingFrom = move.to + 1;
                this._movePiece(castlingFrom, castlingTo);
            }
            else if (move.flags & BITS.QSIDE_CASTLE) {
                const castlingTo = move.to + 1;
                const castlingFrom = move.to - 2;
                this._movePiece(castlingFrom, castlingTo);
            }
            // turn off castling
            this._castling[us] = 0;
        }
        // turn off castling if we move a rook
        if (this._castling[us]) {
            for (let i = 0, len = ROOKS[us].length; i < len; i++) {
                if (move.from === ROOKS[us][i].square &&
                    this._castling[us] & ROOKS[us][i].flag) {
                    this._castling[us] ^= ROOKS[us][i].flag;
                    break;
                }
            }
        }
        // turn off castling if we capture a rook
        if (this._castling[them]) {
            for (let i = 0, len = ROOKS[them].length; i < len; i++) {
                if (move.to === ROOKS[them][i].square &&
                    this._castling[them] & ROOKS[them][i].flag) {
                    this._castling[them] ^= ROOKS[them][i].flag;
                    break;
                }
            }
        }
        this._hash ^= this._castlingKey();
        // if big pawn move, update the en passant square
        if (move.flags & BITS.BIG_PAWN) {
            let epSquare;
            if (us === BLACK) {
                epSquare = move.to - 16;
            }
            else {
                epSquare = move.to + 16;
            }
            if ((!((move.to - 1) & 0x88) &&
                this._board[move.to - 1]?.type === PAWN &&
                this._board[move.to - 1]?.color === them) ||
                (!((move.to + 1) & 0x88) &&
                    this._board[move.to + 1]?.type === PAWN &&
                    this._board[move.to + 1]?.color === them)) {
                this._epSquare = epSquare;
                this._hash ^= this._epKey();
            }
            else {
                this._epSquare = EMPTY;
            }
        }
        else {
            this._epSquare = EMPTY;
        }
        // reset the 50 move counter if a pawn is moved or a piece is captured
        if (move.piece === PAWN) {
            this._halfMoves = 0;
        }
        else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {
            this._halfMoves = 0;
        }
        else {
            this._halfMoves++;
        }
        if (us === BLACK) {
            this._moveNumber++;
        }
        this._turn = them;
        this._hash ^= SIDE_KEY;
    }
    undo() {
        const hash = this._hash;
        const move = this._undoMove();
        if (move) {
            const prettyMove = new Move(this, move);
            this._decPositionCount(hash);
            return prettyMove;
        }
        return null;
    }
    _undoMove() {
        const old = this._history.pop();
        if (old === undefined) {
            return null;
        }
        this._hash ^= this._epKey();
        this._hash ^= this._castlingKey();
        const move = old.move;
        this._kings = old.kings;
        this._turn = old.turn;
        this._castling = old.castling;
        this._epSquare = old.epSquare;
        this._halfMoves = old.halfMoves;
        this._moveNumber = old.moveNumber;
        this._hash ^= this._epKey();
        this._hash ^= this._castlingKey();
        this._hash ^= SIDE_KEY;
        const us = this._turn;
        const them = swapColor(us);
        this._movePiece(move.to, move.from);
        // to undo any promotions
        if (move.piece) {
            this._clear(move.from);
            this._set(move.from, { type: move.piece, color: us });
        }
        if (move.captured) {
            if (move.flags & BITS.EP_CAPTURE) {
                // en passant capture
                let index;
                if (us === BLACK) {
                    index = move.to - 16;
                }
                else {
                    index = move.to + 16;
                }
                this._set(index, { type: PAWN, color: them });
            }
            else {
                // regular capture
                this._set(move.to, { type: move.captured, color: them });
            }
        }
        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {
            let castlingTo, castlingFrom;
            if (move.flags & BITS.KSIDE_CASTLE) {
                castlingTo = move.to + 1;
                castlingFrom = move.to - 1;
            }
            else {
                castlingTo = move.to - 2;
                castlingFrom = move.to + 1;
            }
            this._movePiece(castlingFrom, castlingTo);
        }
        return move;
    }
    pgn({ newline = '\n', maxWidth = 0, } = {}) {
        /*
         * using the specification from http://www.chessclub.com/help/PGN-spec
         * example for html usage: .pgn({ max_width: 72, newline_char: "<br />" })
         */
        const result = [];
        let headerExists = false;
        /* add the PGN header information */
        for (const i in this._header) {
            /*
             * TODO: order of enumerated properties in header object is not
             * guaranteed, see ECMA-262 spec (section 12.6.4)
             *
             * By using HEADER_TEMPLATE, the order of tags should be preserved; we
             * do have to check for null placeholders, though, and omit them
             */
            const headerTag = this._header[i];
            if (headerTag)
                result.push(`[${i} "${this._header[i]}"]` + newline);
            headerExists = true;
        }
        if (headerExists && this._history.length) {
            result.push(newline);
        }
        const appendComment = (moveString) => {
            const comment = this._comments[this.fen()];
            if (typeof comment !== 'undefined') {
                const delimiter = moveString.length > 0 ? ' ' : '';
                moveString = `${moveString}${delimiter}{${comment}}`;
            }
            return moveString;
        };
        // pop all of history onto reversed_history
        const reversedHistory = [];
        while (this._history.length > 0) {
            reversedHistory.push(this._undoMove());
        }
        const moves = [];
        let moveString = '';
        // special case of a commented starting position with no moves
        if (reversedHistory.length === 0) {
            moves.push(appendComment(''));
        }
        // build the list of moves.  a move_string looks like: "3. e3 e6"
        while (reversedHistory.length > 0) {
            moveString = appendComment(moveString);
            const move = reversedHistory.pop();
            // make TypeScript stop complaining about move being undefined
            if (!move) {
                break;
            }
            // if the position started with black to move, start PGN with #. ...
            if (!this._history.length && move.color === 'b') {
                const prefix = `${this._moveNumber}. ...`;
                // is there a comment preceding the first move?
                moveString = moveString ? `${moveString} ${prefix}` : prefix;
            }
            else if (move.color === 'w') {
                // store the previous generated move_string if we have one
                if (moveString.length) {
                    moves.push(moveString);
                }
                moveString = this._moveNumber + '.';
            }
            moveString =
                moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }));
            this._makeMove(move);
        }
        // are there any other leftover moves?
        if (moveString.length) {
            moves.push(appendComment(moveString));
        }
        // is there a result? (there ALWAYS has to be a result according to spec; see Seven Tag Roster)
        moves.push(this._header.Result || '*');
        /*
         * history should be back to what it was before we started generating PGN,
         * so join together moves
         */
        if (maxWidth === 0) {
            return result.join('') + moves.join(' ');
        }
        // TODO (jah): huh?
        const strip = function () {
            if (result.length > 0 && result[result.length - 1] === ' ') {
                result.pop();
                return true;
            }
            return false;
        };
        // NB: this does not preserve comment whitespace.
        const wrapComment = function (width, move) {
            for (const token of move.split(' ')) {
                if (!token) {
                    continue;
                }
                if (width + token.length > maxWidth) {
                    while (strip()) {
                        width--;
                    }
                    result.push(newline);
                    width = 0;
                }
                result.push(token);
                width += token.length;
                result.push(' ');
                width++;
            }
            if (strip()) {
                width--;
            }
            return width;
        };
        // wrap the PGN output at max_width
        let currentWidth = 0;
        for (let i = 0; i < moves.length; i++) {
            if (currentWidth + moves[i].length > maxWidth) {
                if (moves[i].includes('{')) {
                    currentWidth = wrapComment(currentWidth, moves[i]);
                    continue;
                }
            }
            // if the current move will push past max_width
            if (currentWidth + moves[i].length > maxWidth && i !== 0) {
                // don't end the line with whitespace
                if (result[result.length - 1] === ' ') {
                    result.pop();
                }
                result.push(newline);
                currentWidth = 0;
            }
            else if (i !== 0) {
                result.push(' ');
                currentWidth++;
            }
            result.push(moves[i]);
            currentWidth += moves[i].length;
        }
        return result.join('');
    }
    /**
     * @deprecated Use `setHeader` and `getHeaders` instead. This method will return null header tags (which is not what you want)
     */
    header(...args) {
        for (let i = 0; i < args.length; i += 2) {
            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {
                this._header[args[i]] = args[i + 1];
            }
        }
        return this._header;
    }
    // TODO: value validation per spec
    setHeader(key, value) {
        this._header[key] = value ?? SEVEN_TAG_ROSTER[key] ?? null;
        return this.getHeaders();
    }
    removeHeader(key) {
        if (key in this._header) {
            this._header[key] = SEVEN_TAG_ROSTER[key] || null;
            return true;
        }
        return false;
    }
    // return only non-null headers (omit placemarker nulls)
    getHeaders() {
        const nonNullHeaders = {};
        for (const [key, value] of Object.entries(this._header)) {
            if (value !== null) {
                nonNullHeaders[key] = value;
            }
        }
        return nonNullHeaders;
    }
    loadPgn(pgn, { strict = false, newlineChar = '\r?\n', } = {}) {
        // If newlineChar is not the default, replace all instances with \n
        if (newlineChar !== '\r?\n') {
            pgn = pgn.replace(new RegExp(newlineChar, 'g'), '\n');
        }
        const parsedPgn = pgnExports.parse(pgn);
        // Put the board in the starting position
        this.reset();
        // parse PGN header
        const headers = parsedPgn.headers;
        let fen = '';
        for (const key in headers) {
            // check to see user is including fen (possibly with wrong tag case)
            if (key.toLowerCase() === 'fen') {
                fen = headers[key];
            }
            this.header(key, headers[key]);
        }
        /*
         * the permissive parser should attempt to load a fen tag, even if it's the
         * wrong case and doesn't include a corresponding [SetUp "1"] tag
         */
        if (!strict) {
            if (fen) {
                this.load(fen, { preserveHeaders: true });
            }
        }
        else {
            /*
             * strict parser - load the starting position indicated by [Setup '1']
             * and [FEN position]
             */
            if (headers['SetUp'] === '1') {
                if (!('FEN' in headers)) {
                    throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');
                }
                // don't clear the headers when loading
                this.load(headers['FEN'], { preserveHeaders: true });
            }
        }
        let node = parsedPgn.root;
        while (node) {
            if (node.move) {
                const move = this._moveFromSan(node.move, strict);
                if (move == null) {
                    throw new Error(`Invalid move in PGN: ${node.move}`);
                }
                else {
                    this._makeMove(move);
                    this._incPositionCount();
                }
            }
            if (node.comment !== undefined) {
                this._comments[this.fen()] = node.comment;
            }
            node = node.variations[0];
        }
        /*
         * Per section 8.2.6 of the PGN spec, the Result tag pair must match match
         * the termination marker. Only do this when headers are present, but the
         * result tag is missing
         */
        const result = parsedPgn.result;
        if (result &&
            Object.keys(this._header).length &&
            this._header['Result'] !== result) {
            this.setHeader('Result', result);
        }
    }
    /*
     * Convert a move from 0x88 coordinates to Standard Algebraic Notation
     * (SAN)
     *
     * @param {boolean} strict Use the strict SAN parser. It will throw errors
     * on overly disambiguated moves (see below):
     *
     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4
     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned
     * 4. ... Ne7 is technically the valid SAN
     */
    _moveToSan(move, moves) {
        let output = '';
        if (move.flags & BITS.KSIDE_CASTLE) {
            output = 'O-O';
        }
        else if (move.flags & BITS.QSIDE_CASTLE) {
            output = 'O-O-O';
        }
        else {
            if (move.piece !== PAWN) {
                const disambiguator = getDisambiguator(move, moves);
                output += move.piece.toUpperCase() + disambiguator;
            }
            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {
                if (move.piece === PAWN) {
                    output += algebraic(move.from)[0];
                }
                output += 'x';
            }
            output += algebraic(move.to);
            if (move.promotion) {
                output += '=' + move.promotion.toUpperCase();
            }
        }
        this._makeMove(move);
        if (this.isCheck()) {
            if (this.isCheckmate()) {
                output += '#';
            }
            else {
                output += '+';
            }
        }
        this._undoMove();
        return output;
    }
    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates
    _moveFromSan(move, strict = false) {
        // strip off any move decorations: e.g Nf3+?! becomes Nf3
        let cleanMove = strippedSan(move);
        if (!strict) {
            if (cleanMove === '0-0') {
                cleanMove = 'O-O';
            }
            else if (cleanMove === '0-0-0') {
                cleanMove = 'O-O-O';
            }
        }
        let pieceType = inferPieceType(cleanMove);
        let moves = this._moves({ legal: true, piece: pieceType });
        // strict parser
        for (let i = 0, len = moves.length; i < len; i++) {
            if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {
                return moves[i];
            }
        }
        // the strict parser failed
        if (strict) {
            return null;
        }
        let piece = undefined;
        let matches = undefined;
        let from = undefined;
        let to = undefined;
        let promotion = undefined;
        /*
         * The default permissive (non-strict) parser allows the user to parse
         * non-standard chess notations. This parser is only run after the strict
         * Standard Algebraic Notation (SAN) parser has failed.
         *
         * When running the permissive parser, we'll run a regex to grab the piece, the
         * to/from square, and an optional promotion piece. This regex will
         * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,
         * f7f8q, b1c3
         *
         * NOTE: Some positions and moves may be ambiguous when using the permissive
         * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,
         * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop
         * move). In these cases, the permissive parser will default to the most
         * basic interpretation (which is b1c3 parsing to Nc3).
         */
        let overlyDisambiguated = false;
        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);
        if (matches) {
            piece = matches[1];
            from = matches[2];
            to = matches[3];
            promotion = matches[4];
            if (from.length == 1) {
                overlyDisambiguated = true;
            }
        }
        else {
            /*
             * The [a-h]?[1-8]? portion of the regex below handles moves that may be
             * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when
             * there is one legal knight move to e7). In this case, the value of
             * 'from' variable will be a rank or file, not a square.
             */
            matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);
            if (matches) {
                piece = matches[1];
                from = matches[2];
                to = matches[3];
                promotion = matches[4];
                if (from.length == 1) {
                    overlyDisambiguated = true;
                }
            }
        }
        pieceType = inferPieceType(cleanMove);
        moves = this._moves({
            legal: true,
            piece: piece ? piece : pieceType,
        });
        if (!to) {
            return null;
        }
        for (let i = 0, len = moves.length; i < len; i++) {
            if (!from) {
                // if there is no from square, it could be just 'x' missing from a capture
                if (cleanMove ===
                    strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {
                    return moves[i];
                }
                // hand-compare move properties with the results from our permissive regex
            }
            else if ((!piece || piece.toLowerCase() == moves[i].piece) &&
                Ox88[from] == moves[i].from &&
                Ox88[to] == moves[i].to &&
                (!promotion || promotion.toLowerCase() == moves[i].promotion)) {
                return moves[i];
            }
            else if (overlyDisambiguated) {
                /*
                 * SPECIAL CASE: we parsed a move string that may have an unneeded
                 * rank/file disambiguator (e.g. Nge7).  The 'from' variable will
                 */
                const square = algebraic(moves[i].from);
                if ((!piece || piece.toLowerCase() == moves[i].piece) &&
                    Ox88[to] == moves[i].to &&
                    (from == square[0] || from == square[1]) &&
                    (!promotion || promotion.toLowerCase() == moves[i].promotion)) {
                    return moves[i];
                }
            }
        }
        return null;
    }
    ascii() {
        let s = '   +------------------------+\n';
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            // display the rank
            if (file(i) === 0) {
                s += ' ' + '87654321'[rank(i)] + ' |';
            }
            if (this._board[i]) {
                const piece = this._board[i].type;
                const color = this._board[i].color;
                const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();
                s += ' ' + symbol + ' ';
            }
            else {
                s += ' . ';
            }
            if ((i + 1) & 0x88) {
                s += '|\n';
                i += 8;
            }
        }
        s += '   +------------------------+\n';
        s += '     a  b  c  d  e  f  g  h';
        return s;
    }
    perft(depth) {
        const moves = this._moves({ legal: false });
        let nodes = 0;
        const color = this._turn;
        for (let i = 0, len = moves.length; i < len; i++) {
            this._makeMove(moves[i]);
            if (!this._isKingAttacked(color)) {
                if (depth - 1 > 0) {
                    nodes += this.perft(depth - 1);
                }
                else {
                    nodes++;
                }
            }
            this._undoMove();
        }
        return nodes;
    }
    turn() {
        return this._turn;
    }
    board() {
        const output = [];
        let row = [];
        for (let i = Ox88.a8; i <= Ox88.h1; i++) {
            if (this._board[i] == null) {
                row.push(null);
            }
            else {
                row.push({
                    square: algebraic(i),
                    type: this._board[i].type,
                    color: this._board[i].color,
                });
            }
            if ((i + 1) & 0x88) {
                output.push(row);
                row = [];
                i += 8;
            }
        }
        return output;
    }
    squareColor(square) {
        if (square in Ox88) {
            const sq = Ox88[square];
            return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';
        }
        return null;
    }
    history({ verbose = false } = {}) {
        const reversedHistory = [];
        const moveHistory = [];
        while (this._history.length > 0) {
            reversedHistory.push(this._undoMove());
        }
        while (true) {
            const move = reversedHistory.pop();
            if (!move) {
                break;
            }
            if (verbose) {
                moveHistory.push(new Move(this, move));
            }
            else {
                moveHistory.push(this._moveToSan(move, this._moves()));
            }
            this._makeMove(move);
        }
        return moveHistory;
    }
    /*
     * Keeps track of position occurrence counts for the purpose of repetition
     * checking. Old positions are removed from the map if their counts are reduced to 0.
     */
    _getPositionCount(hash) {
        return this._positionCount.get(hash) ?? 0;
    }
    _incPositionCount() {
        this._positionCount.set(this._hash, (this._positionCount.get(this._hash) ?? 0) + 1);
    }
    _decPositionCount(hash) {
        const currentCount = this._positionCount.get(hash) ?? 0;
        if (currentCount === 1) {
            this._positionCount.delete(hash);
        }
        else {
            this._positionCount.set(hash, currentCount - 1);
        }
    }
    _pruneComments() {
        const reversedHistory = [];
        const currentComments = {};
        const copyComment = (fen) => {
            if (fen in this._comments) {
                currentComments[fen] = this._comments[fen];
            }
        };
        while (this._history.length > 0) {
            reversedHistory.push(this._undoMove());
        }
        copyComment(this.fen());
        while (true) {
            const move = reversedHistory.pop();
            if (!move) {
                break;
            }
            this._makeMove(move);
            copyComment(this.fen());
        }
        this._comments = currentComments;
    }
    getComment() {
        return this._comments[this.fen()];
    }
    setComment(comment) {
        this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');
    }
    /**
     * @deprecated Renamed to `removeComment` for consistency
     */
    deleteComment() {
        return this.removeComment();
    }
    removeComment() {
        const comment = this._comments[this.fen()];
        delete this._comments[this.fen()];
        return comment;
    }
    getComments() {
        this._pruneComments();
        return Object.keys(this._comments).map((fen) => {
            return { fen: fen, comment: this._comments[fen] };
        });
    }
    /**
     * @deprecated Renamed to `removeComments` for consistency
     */
    deleteComments() {
        return this.removeComments();
    }
    removeComments() {
        this._pruneComments();
        return Object.keys(this._comments).map((fen) => {
            const comment = this._comments[fen];
            delete this._comments[fen];
            return { fen: fen, comment: comment };
        });
    }
    setCastlingRights(color, rights) {
        for (const side of [KING, QUEEN]) {
            if (rights[side] !== undefined) {
                if (rights[side]) {
                    this._castling[color] |= SIDES[side];
                }
                else {
                    this._castling[color] &= ~SIDES[side];
                }
            }
        }
        this._updateCastlingRights();
        const result = this.getCastlingRights(color);
        return ((rights[KING] === undefined || rights[KING] === result[KING]) &&
            (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]));
    }
    getCastlingRights(color) {
        return {
            [KING]: (this._castling[color] & SIDES[KING]) !== 0,
            [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,
        };
    }
    moveNumber() {
        return this._moveNumber;
    }
}

/**
* The Chessboard class is a thin façade around the chess.js library. This is
* too keep most of the compatibility with the old Chessboard class, but to take
* advance of a more solid Chessboard library that include built-in FEN
* validation, PGN support, history and cooler features that we can use in the
* visualization.
*/
var Chessboard = /** @class */ (function () {
    function Chessboard() {
        this.chessboard = new Chess();
    }
    Chessboard.prototype.set = function (c, r, piece) {
        this.chessboard.put(piece, Chessboard.coordToAlgebraic([c, r]));
    };
    Chessboard.prototype.get = function (c, r) {
        return this.chessboard.get(Chessboard.coordToAlgebraic([c, r]));
    };
    Chessboard.prototype.setAlgebraic = function (algebraic, piece) {
        return this.chessboard.put(piece, algebraic);
    };
    Chessboard.prototype.getAlgebraic = function (algebraic) {
        return this.chessboard.get(algebraic);
    };
    Chessboard.prototype.print = function () {
        console.log(this.chessboard.ascii());
    };
    Chessboard.algebraicToCoord = function (algebraic) {
        algebraic = algebraic.toLowerCase();
        if (algebraic.length !== 2) {
            throw Error("Input does not look algebraic notation.");
        }
        var column = algebraic.charCodeAt(0) - "a".charCodeAt(0);
        var row = 8 - parseInt(algebraic[1]);
        return [column, row];
    };
    Chessboard.coordToAlgebraic = function (coord) {
        var c = coord[0], r = coord[1];
        if (c < 0 || c > 7 || r < 0 || r > 7) {
            throw Error("Input does not look like a chessboard coordinate.");
        }
        return String.fromCharCode(c + "a".charCodeAt(0)) + (8 - r);
    };
    Chessboard.fromFEN = function (fenString) {
        var chessboard = new Chessboard();
        // Check if FEN includes at least the moving color. If not, append ' w' to the string.
        // This is to ensure compatibility with our less-strict format.
        if (!fenString.trim().includes(" ")) {
            fenString += " w";
        }
        chessboard.chessboard.load(fenString);
        return chessboard;
    };
    Chessboard.fromPGN = function (pgnString) {
        var chessboard = new Chessboard();
        chessboard.chessboard.loadPgn(pgnString);
        return chessboard;
    };
    return Chessboard;
}());

/**
 * In this file there are th SVG images for the board pieces. This is a trick to avoid the complications
 * of having to bundle SVG files into the library.
 *
 * The strings comes from assets/Chess_Piece_Sprite.svg file (that I saved there as a reference)
 */
var WHITE_KING = "\n<g style=\"fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n        <path\n        d=\"M 22.5,11.63 L 22.5,6\"\n        style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" />\n        <path\n        d=\"M 20,8 L 25,8\"\n        style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" />\n        <path\n        d=\"M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25\"\n        style=\"fill:#ffffff; stroke:#000000; stroke-linecap:butt; stroke-linejoin:miter;\" />\n        <path\n        d=\"M 11.5,37 C 17,40.5 27,40.5 32.5,37 L 32.5,30 C 32.5,30 41.5,25.5 38.5,19.5 C 34.5,13 25,16 22.5,23.5 L 22.5,27 L 22.5,23.5 C 19,16 9.5,13 6.5,19.5 C 3.5,25.5 11.5,29.5 11.5,29.5 L 11.5,37 z \"\n        style=\"fill:#ffffff; stroke:#000000;\" />\n        <path\n        d=\"M 11.5,30 C 17,27 27,27 32.5,30\"\n        style=\"fill:none; stroke:#000000;\" />\n        <path\n        d=\"M 11.5,33.5 C 17,30.5 27,30.5 32.5,33.5\"\n        style=\"fill:none; stroke:#000000;\" />\n        <path\n        d=\"M 11.5,37 C 17,34 27,34 32.5,37\"\n        style=\"fill:none; stroke:#000000;\" />\n    </g>";
var WHITE_QUEEN = "<g style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n    <path\n    d=\"M 9 13 A 2 2 0 1 1  5,13 A 2 2 0 1 1  9 13 z\"\n    transform=\"translate(-1,-1)\" />\n    <path\n    d=\"M 9 13 A 2 2 0 1 1  5,13 A 2 2 0 1 1  9 13 z\"\n    transform=\"translate(15.5,-5.5)\" />\n    <path\n    d=\"M 9 13 A 2 2 0 1 1  5,13 A 2 2 0 1 1  9 13 z\"\n    transform=\"translate(32,-1)\" />\n    <path\n    d=\"M 9 13 A 2 2 0 1 1  5,13 A 2 2 0 1 1  9 13 z\"\n    transform=\"translate(7,-4.5)\" />\n    <path\n    d=\"M 9 13 A 2 2 0 1 1  5,13 A 2 2 0 1 1  9 13 z\"\n    transform=\"translate(24,-4)\" />\n    <path\n    d=\"M 9,26 C 17.5,24.5 30,24.5 36,26 L 38,14 L 31,25 L 31,11 L 25.5,24.5 L 22.5,9.5 L 19.5,24.5 L 14,10.5 L 14,25 L 7,14 L 9,26 z \"\n    style=\"stroke-linecap:butt;\" />\n    <path\n    d=\"M 9,26 C 9,28 10.5,28 11.5,30 C 12.5,31.5 12.5,31 12,33.5 C 10.5,34.5 10.5,36 10.5,36 C 9,37.5 11,38.5 11,38.5 C 17.5,39.5 27.5,39.5 34,38.5 C 34,38.5 35.5,37.5 34,36 C 34,36 34.5,34.5 33,33.5 C 32.5,31 32.5,31.5 33.5,30 C 34.5,28 36,28 36,26 C 27.5,24.5 17.5,24.5 9,26 z \"\n    style=\"stroke-linecap:butt;\" />\n    <path\n    d=\"M 11.5,30 C 15,29 30,29 33.5,30\"\n    style=\"fill:none;\" />\n    <path\n    d=\"M 12,33.5 C 18,32.5 27,32.5 33,33.5\"\n    style=\"fill:none;\" />\n</g>";
var WHITE_BISHOP = "<g style=\"opacity:1; fill:none; fill-rule:evenodd; fill-opacity:1; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:round; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<g style=\"fill:#ffffff; stroke:#000000; stroke-linecap:butt;\"> \n    <path\n    d=\"M 9,36 C 12.39,35.03 19.11,36.43 22.5,34 C 25.89,36.43 32.61,35.03 36,36 C 36,36 37.65,36.54 39,38 C 38.32,38.97 37.35,38.99 36,38.5 C 32.61,37.53 25.89,38.96 22.5,37.5 C 19.11,38.96 12.39,37.53 9,38.5 C 7.646,38.99 6.677,38.97 6,38 C 7.354,36.06 9,36 9,36 z\" />\n    <path\n    d=\"M 15,32 C 17.5,34.5 27.5,34.5 30,32 C 30.5,30.5 30,30 30,30 C 30,27.5 27.5,26 27.5,26 C 33,24.5 33.5,14.5 22.5,10.5 C 11.5,14.5 12,24.5 17.5,26 C 17.5,26 15,27.5 15,30 C 15,30 14.5,30.5 15,32 z\" />\n    <path\n    d=\"M 25 8 A 2.5 2.5 0 1 1  20,8 A 2.5 2.5 0 1 1  25 8 z\" />\n</g>\n<path\nd=\"M 17.5,26 L 27.5,26 M 15,30 L 30,30 M 22.5,15.5 L 22.5,20.5 M 20,18 L 25,18\"\nstyle=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" />\n</g>";
var WHITE_KNIGHT = "<g style=\"opacity:1; fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<path\nd=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\"\nstyle=\"fill:#ffffff; stroke:#000000;\" />\n<path\nd=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\"\nstyle=\"fill:#ffffff; stroke:#000000;\" />\n<path\nd=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\"\nstyle=\"fill:#000000; stroke:#000000;\" />\n<path\nd=\"M 15 15.5 A 0.5 1.5 0 1 1  14,15.5 A 0.5 1.5 0 1 1  15 15.5 z\"\ntransform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\"\nstyle=\"fill:#000000; stroke:#000000;\" />\n</g>";
var WHITE_ROOK = "<g style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<path\nd=\"M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14\"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 34,14 L 31,17 L 14,17 L 11,14\" />\n<path\nd=\"M 31,17 L 31,29.5 L 14,29.5 L 14,17\"\nstyle=\"stroke-linecap:butt; stroke-linejoin:miter;\" />\n<path\nd=\"M 31,29.5 L 32.5,32 L 12.5,32 L 14,29.5\" />\n<path\nd=\"M 11,14 L 34,14\"\nstyle=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" />\n</g>";
var WHITE_PAWN = "<g>\n<path\nd=\"M 22,9 C 19.79,9 18,10.79 18,13 C 18,13.89 18.29,14.71 18.78,15.38 C 16.83,16.5 15.5,18.59 15.5,21 C 15.5,23.03 16.44,24.84 17.91,26.03 C 14.91,27.09 10.5,31.58 10.5,39.5 L 33.5,39.5 C 33.5,31.58 29.09,27.09 26.09,26.03 C 27.56,24.84 28.5,23.03 28.5,21 C 28.5,18.59 27.17,16.5 25.22,15.38 C 25.71,14.71 26,13.89 26,13 C 26,10.79 24.21,9 22,9 z \"\nstyle=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:nonzero; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:miter; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\" />\n</g>";
var BLACK_KING = "<g style=\"fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<path \n    d=\"M 22.5,11.63 L 22.5,6\"\n    style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" />\n<path\n    d=\"M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25\" \n    style=\"fill:#000000;fill-opacity:1; stroke-linecap:butt; stroke-linejoin:miter;\" />\n<path\n   d=\"M 11.5,37 C 17,40.5 27,40.5 32.5,37 L 32.5,30 C 32.5,30 41.5,25.5 38.5,19.5 C 34.5,13 25,16 22.5,23.5 L 22.5,27 L 22.5,23.5 C 19,16 9.5,13 6.5,19.5 C 3.5,25.5 11.5,29.5 11.5,29.5 L 11.5,37 z \"\n   style=\"fill:#000000; stroke:#000000;\" />\n<path\n   d=\"M 20,8 L 25,8\"\n   style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" />\n<path\n   d=\"M 32,29.5 C 32,29.5 40.5,25.5 38.03,19.85 C 34.15,14 25,18 22.5,24.5 L 22.51,26.6 L 22.5,24.5 C 20,18 9.906,14 6.997,19.85 C 4.5,25.5 11.85,28.85 11.85,28.85\"\n   style=\"fill:none; stroke:#ffffff;\" />\n<path\n   d=\"M 11.5,30 C 17,27 27,27 32.5,30 M 11.5,33.5 C 17,30.5 27,30.5 32.5,33.5 M 11.5,37 C 17,34 27,34 32.5,37\"\n   style=\"fill:none; stroke:#ffffff;\" />\n</g>";
var BLACK_QUEEN = "<g style=\"opacity:1; fill:#000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<g style=\"fill:#000000; stroke:none;\">\n    <circle cx=\"6\"    cy=\"12\" r=\"2.75\" />\n    <circle cx=\"14\"   cy=\"9\"  r=\"2.75\" />\n    <circle cx=\"22.5\" cy=\"8\"  r=\"2.75\" />\n    <circle cx=\"31\"   cy=\"9\"  r=\"2.75\" />\n    <circle cx=\"39\"   cy=\"12\" r=\"2.75\" />\n</g>\n<path\nd=\"M 9,26 C 17.5,24.5 30,24.5 36,26 L 38.5,13.5 L 31,25 L 30.7,10.9 L 25.5,24.5 L 22.5,10 L 19.5,24.5 L 14.3,10.9 L 14,25 L 6.5,13.5 L 9,26 z\"\nstyle=\"stroke-linecap:butt; stroke:#000000;\" />\n<path\nd=\"M 9,26 C 9,28 10.5,28 11.5,30 C 12.5,31.5 12.5,31 12,33.5 C 10.5,34.5 10.5,36 10.5,36 C 9,37.5 11,38.5 11,38.5 C 17.5,39.5 27.5,39.5 34,38.5 C 34,38.5 35.5,37.5 34,36 C 34,36 34.5,34.5 33,33.5 C 32.5,31 32.5,31.5 33.5,30 C 34.5,28 36,28 36,26 C 27.5,24.5 17.5,24.5 9,26 z\"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 11,38.5 A 35,35 1 0 0 34,38.5\"\nstyle=\"fill:none; stroke:#000000; stroke-linecap:butt;\" />\n<path\nd=\"M 11,29 A 35,35 1 0 1 34,29\"\nstyle=\"fill:none; stroke:#ffffff;\" />\n<path\nd=\"M 12.5,31.5 L 32.5,31.5\"\nstyle=\"fill:none; stroke:#ffffff;\" />\n<path\nd=\"M 11.5,34.5 A 35,35 1 0 0 33.5,34.5\"\nstyle=\"fill:none; stroke:#ffffff;\" />\n<path\nd=\"M 10.5,37.5 A 35,35 1 0 0 34.5,37.5\"\nstyle=\"fill:none; stroke:#ffffff;\" />\n</g>";
var BLACK_BISHOP = "<g style=\"opacity:1; fill:none; fill-rule:evenodd; fill-opacity:1; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:round; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<g style=\"fill:#000000; stroke:#000000; stroke-linecap:butt;\"> \n    <path\n        d=\"M 9,36 C 12.39,35.03 19.11,36.43 22.5,34 C 25.89,36.43 32.61,35.03 36,36 C 36,36 37.65,36.54 39,38 C 38.32,38.97 37.35,38.99 36,38.5 C 32.61,37.53 25.89,38.96 22.5,37.5 C 19.11,38.96 12.39,37.53 9,38.5 C 7.646,38.99 6.677,38.97 6,38 C 7.354,36.06 9,36 9,36 z\" />\n    <path\n        d=\"M 15,32 C 17.5,34.5 27.5,34.5 30,32 C 30.5,30.5 30,30 30,30 C 30,27.5 27.5,26 27.5,26 C 33,24.5 33.5,14.5 22.5,10.5 C 11.5,14.5 12,24.5 17.5,26 C 17.5,26 15,27.5 15,30 C 15,30 14.5,30.5 15,32 z\" />\n    <path\n        d=\"M 25 8 A 2.5 2.5 0 1 1  20,8 A 2.5 2.5 0 1 1  25 8 z\" />\n</g>\n<path\n   d=\"M 17.5,26 L 27.5,26 M 15,30 L 30,30 M 22.5,15.5 L 22.5,20.5 M 20,18 L 25,18\"\n   style=\"fill:none; stroke:#ffffff; stroke-linejoin:miter;\" />\n</g>";
var BLACK_KNIGHT = "<g style=\"opacity:1; fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<path\n   d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\"\n   style=\"fill:#000000; stroke:#000000;\" />\n<path\n   d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\"\n   style=\"fill:#000000; stroke:#000000;\" />\n<path\n   d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\"\n   style=\"fill:#ffffff; stroke:#ffffff;\" />\n<path\n   d=\"M 15 15.5 A 0.5 1.5 0 1 1  14,15.5 A 0.5 1.5 0 1 1  15 15.5 z\"\n   transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\"\n   style=\"fill:#ffffff; stroke:#ffffff;\" />\n<path\n   d=\"M 24.55,10.4 L 24.1,11.85 L 24.6,12 C 27.75,13 30.25,14.49 32.5,18.75 C 34.75,23.01 35.75,29.06 35.25,39 L 35.2,39.5 L 37.45,39.5 L 37.5,39 C 38,28.94 36.62,22.15 34.25,17.66 C 31.88,13.17 28.46,11.02 25.06,10.5 L 24.55,10.4 z \"\n   style=\"fill:#ffffff; stroke:none;\" />\n</g>";
var BLACK_ROOK = "<g style=\"opacity:1; fill:#000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"\">\n<path\nd=\"M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 12.5,32 L 14,29.5 L 31,29.5 L 32.5,32 L 12.5,32 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 14,29.5 L 14,16.5 L 31,16.5 L 31,29.5 L 14,29.5 z \"\nstyle=\"stroke-linecap:butt;stroke-linejoin:miter;\" />\n<path\nd=\"M 14,16.5 L 11,14 L 34,14 L 31,16.5 L 14,16.5 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14 L 11,14 z \"\nstyle=\"stroke-linecap:butt;\" />\n<path\nd=\"M 12,35.5 L 33,35.5 L 33,35.5\"\nstyle=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" />\n<path\nd=\"M 13,31.5 L 32,31.5\"\nstyle=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" />\n<path\nd=\"M 14,29.5 L 31,29.5\"\nstyle=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" />\n<path\nd=\"M 14,16.5 L 31,16.5\"\nstyle=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" />\n<path\nd=\"M 11,14 L 34,14\"\nstyle=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" />\n</g>";
var BLACK_PAWN = "<g>\n<path\nd=\"M 22,9 C 19.79,9 18,10.79 18,13 C 18,13.89 18.29,14.71 18.78,15.38 C 16.83,16.5 15.5,18.59 15.5,21 C 15.5,23.03 16.44,24.84 17.91,26.03 C 14.91,27.09 10.5,31.58 10.5,39.5 L 33.5,39.5 C 33.5,31.58 29.09,27.09 26.09,26.03 C 27.56,24.84 28.5,23.03 28.5,21 C 28.5,18.59 27.17,16.5 25.22,15.38 C 25.71,14.71 26,13.89 26,13 C 26,10.79 24.21,9 22,9 z \"\nstyle=\"opacity:1; fill:#000000; fill-opacity:1; fill-rule:nonzero; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:miter; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\" />\n</g>";
/**
 * A disgusting hack to recolor the pieces. I'm sorry.
 *
 * @param piece The SVG string of the piece
 * @param oldFillColorRegex The regex to match the old fill color
 * @param newFillColor The new fill color, in hex format
 * @param oldLineColorRegex The regex to match the old line color
 * @param newLinecolor The new line color, in hex format
 * @returns
 */
function recolor(piece, oldFillColorRegex, newFillColor, oldLineColorRegex, newLinecolor) {
    // Check if the old color is the same as the new color
    var result;
    if (oldFillColorRegex.source === newFillColor) {
        result = piece;
    }
    else {
        result = piece.replace(oldFillColorRegex, newFillColor);
    }
    // After recoloring the fill, we also need to recolor the lines.
    if (oldLineColorRegex && newLinecolor) {
        if (oldLineColorRegex.source === newLinecolor) {
            return result;
        }
        else {
            return result.replace(oldLineColorRegex, newLinecolor);
        }
    }
    return result;
}
function recolorWhite(piece, color, lineColor) {
    if (color === "#000000") {
        // If you want to color your white pieces black, I am not going to stop you.
        // But I will not use "full black" otherwise it will mess up the line recoloring.
        color = "#000001";
    }
    return recolor(piece, /#ffffff/g, color, /#000000/g, lineColor);
}
function recolorBlack(piece, color, lineColor) {
    if (color === "#ffffff") {
        // If you want to color your black pieces white, I am not going to stop you.
        // But I will not use "full white" otherwise it will mess up the line recoloring.
        color = "#ffffffe";
    }
    return recolor(piece, /#000000/g, color, /#ffffff/g, lineColor);
}

var SVGChessboard = /** @class */ (function () {
    function SVGChessboard(chessboard, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.drawCoordinates, drawCoordinates = _c === void 0 ? true : _c, _d = _b.orientation, orientation = _d === void 0 ? "white" : _d, _e = _b.whiteSquareColor, whiteSquareColor = _e === void 0 ? "#f0d9b5" : _e, _f = _b.blackSquareColor, blackSquareColor = _f === void 0 ? "#b58862" : _f, _g = _b.whitePieceColor, whitePieceColor = _g === void 0 ? "#ffffff" : _g, _h = _b.blackPieceColor, blackPieceColor = _h === void 0 ? "#000000" : _h, _j = _b.defaultHighlightColor, defaultHighlightColor = _j === void 0 ? "#b0ffb0" : _j, _k = _b.defaultArrowColor, defaultArrowColor = _k === void 0 ? "#ff6060" : _k;
        var _this = this;
        this.xmlns = "http://www.w3.org/2000/svg";
        this.baseSquareSize = 40;
        this.whiteColor = "#f0d9b5";
        this.blackColor = "#b58862";
        this.whitePieceColor = "#ffffff";
        this.blackPieceColor = "#000000";
        this.whitePieceLineColor = "#000000";
        this.blackPieceLineColor = "#ffffff";
        this.defaultHighlightColor = "#b0ffb0";
        this.defaultArrowColor = "#ff6060";
        this.highlights = [];
        this.annotations = [];
        this.chessboard = chessboard;
        this.squareSize = this.baseSquareSize;
        this.squareSizeHalf = this.squareSize / 2;
        this.whiteColor = whiteSquareColor;
        this.blackColor = blackSquareColor;
        this.whitePieceColor = whitePieceColor;
        this.blackPieceColor = blackPieceColor;
        this.whitePieceLineColor = blackPieceColor;
        this.blackPieceLineColor = whitePieceColor;
        this.defaultHighlightColor = defaultHighlightColor;
        this.defaultArrowColor = defaultArrowColor;
        var whiteRecolor = function (piece) {
            return recolorWhite(piece, _this.whitePieceColor, _this.whitePieceLineColor);
        };
        var blackRecolor = function (piece) {
            return recolorBlack(piece, _this.blackPieceColor, _this.blackPieceLineColor);
        };
        this.COLORED_WHITE_PIECES = {
            k: whiteRecolor(WHITE_KING),
            q: whiteRecolor(WHITE_QUEEN),
            n: whiteRecolor(WHITE_KNIGHT),
            r: whiteRecolor(WHITE_ROOK),
            b: whiteRecolor(WHITE_BISHOP),
            p: whiteRecolor(WHITE_PAWN),
        };
        this.COLORED_BLACK_PIECES = {
            k: blackRecolor(BLACK_KING),
            q: blackRecolor(BLACK_QUEEN),
            n: blackRecolor(BLACK_KNIGHT),
            r: blackRecolor(BLACK_ROOK),
            b: blackRecolor(BLACK_BISHOP),
            p: blackRecolor(BLACK_PAWN),
        };
        this.options = {
            orientation: orientation,
            drawCoordinates: drawCoordinates,
            whiteSquareColor: whiteSquareColor,
            blackSquareColor: blackSquareColor,
            whitePieceColor: whitePieceColor,
            blackPieceColor: blackPieceColor,
            defaultHighlightColor: defaultHighlightColor,
            defaultArrowColor: defaultArrowColor,
        };
    }
    SVGChessboard.prototype.draw = function () {
        var g = document.createElementNS(this.xmlns, "g");
        var _a = this.drawAnnotations(), annotations = _a[0], annotations_foreground = _a[1];
        g.appendChild(this.drawBoard());
        if (this.options.drawCoordinates) {
            g.appendChild(this.drawCoordinateSystem());
        }
        g.appendChild(annotations);
        g.appendChild(this.drawPieces());
        g.appendChild(annotations_foreground);
        return g;
    };
    SVGChessboard.prototype.highlight = function (cell, color) {
        if (color === void 0) { color = this.defaultHighlightColor; }
        var _a = Chessboard.algebraicToCoord(cell), c = _a[0], r = _a[1];
        this.highlightCoord(c, r, color);
    };
    SVGChessboard.prototype.addArrow = function (startCell, endCell, color) {
        if (color === void 0) { color = this.defaultArrowColor; }
        this.annotations.push({
            type: "arrow",
            start: startCell,
            end: endCell,
            color: color,
        });
    };
    SVGChessboard.prototype.addIcon = function (position, icon) {
        this.annotations.push({
            type: "icon",
            square: position,
            icon: icon,
        });
    };
    SVGChessboard.prototype.highlightCoord = function (c, r, color) {
        if (color === void 0) { color = this.defaultHighlightColor; }
        this.highlights.push([[c, r], color]);
    };
    SVGChessboard.prototype.removeHighlight = function (cell) {
        this.removeHighlightCoord.apply(this, Chessboard.algebraicToCoord(cell));
    };
    SVGChessboard.prototype.removeHighlightCoord = function (c, r) {
        this.highlights = this.highlights.filter(function (_a) {
            var coord = _a[0]; _a[1];
            return coord[0] !== c || coord[1] !== r;
        });
    };
    SVGChessboard.prototype.setOrientation = function (orientation) {
        this.options.orientation = orientation;
    };
    /**
     * Creates SVG group containing the chessboard annotations.
     *
     * This returns 2 groups: a background and a foreground one. We need this
     * because some annotations need to be drawn below the pieces while others
     * need to be rendered above the pieces (e.g., the icons).
     */
    SVGChessboard.prototype.drawAnnotations = function () {
        var g = document.createElementNS(this.xmlns, "g");
        for (var _i = 0, _a = this.highlights; _i < _a.length; _i++) {
            var _b = _a[_i], coord = _b[0], highlightColor = _b[1];
            var square = this.drawSquare(coord);
            square.setAttributeNS(null, "fill", highlightColor);
            square.style.opacity = "0.8";
            g.appendChild(square);
        }
        var g_foreground = document.createElementNS(this.xmlns, "g");
        for (var _c = 0, _d = this.annotations; _c < _d.length; _c++) {
            var annotation = _d[_c];
            if (annotation.type === "arrow") {
                var start = annotation.start;
                var end = annotation.end;
                var _e = this.getBoardSVGCord(Chessboard.algebraicToCoord(start)), x0 = _e[0], y0 = _e[1];
                var _f = this.getBoardSVGCord(Chessboard.algebraicToCoord(end)), x1 = _f[0], y1 = _f[1];
                g.appendChild(Arrow.drawArrow(x0 + this.squareSizeHalf, y0 + this.squareSizeHalf, x1 + this.squareSizeHalf, y1 + this.squareSizeHalf, annotation.color));
            }
            else if (annotation.type === "icon") {
                var pos = Chessboard.algebraicToCoord(annotation.square);
                switch (annotation.icon) {
                    case "best":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.best));
                        break;
                    case "blunder":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.blunder));
                        break;
                    case "mistake":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.mistake));
                        break;
                    case "inaccuracy":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.inaccuracy));
                        break;
                    case "incorrect":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.incorrect));
                        break;
                    case "good":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.good));
                        break;
                    case "brilliant":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.brilliant));
                        break;
                    case "excellent":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.excellent));
                        break;
                    case "forced":
                        g_foreground.appendChild(this.drawIcon(pos, Icons.forced));
                        break;
                }
            }
        }
        return [g, g_foreground];
    };
    SVGChessboard.prototype.getHighlightedColor = function (c, r) {
        var highlightItem = this.highlights.find(function (hi) {
            var _a = hi[0], x = _a[0], y = _a[1];
            return x === c && y === r;
        });
        return highlightItem === null || highlightItem === void 0 ? void 0 : highlightItem[1];
    };
    SVGChessboard.prototype.drawBoard = function () {
        var g = document.createElementNS(this.xmlns, "g");
        for (var r = 0; r < 8; r++) {
            for (var c = 0; c < 8; c++) {
                g.appendChild(this.drawSquare([c, r]));
            }
        }
        return g;
    };
    SVGChessboard.prototype.drawPieces = function () {
        var g = document.createElementNS(this.xmlns, "g");
        for (var r = 0; r < 8; r++) {
            for (var c = 0; c < 8; c++) {
                var piece = this.chessboard.get(c, r);
                if (!piece) {
                    continue;
                }
                if (piece.color === "w") {
                    g.appendChild(this.drawPiece([c, r], this.COLORED_WHITE_PIECES[piece.type]));
                }
                else if (piece.color === "b") {
                    g.appendChild(this.drawPiece([c, r], this.COLORED_BLACK_PIECES[piece.type]));
                }
                else {
                    continue;
                }
            }
        }
        return g;
    };
    SVGChessboard.prototype.drawIcon = function (coord, icon) {
        var _a = this.getBoardSVGCord(coord), x = _a[0], y = _a[1];
        var g = document.createElementNS(this.xmlns, "g");
        g.setAttributeNS(null, "transform", "translate(".concat(x, ",").concat(y, ") scale(").concat(0.85, ")"));
        Array.from(icon.childNodes).forEach(function (node) {
            g.appendChild(node.cloneNode(true));
        });
        return g;
    };
    SVGChessboard.prototype.drawPiece = function (coord, piece) {
        var _a = this.getBoardSVGCord(coord), x = _a[0], y = _a[1];
        //const DELTA = 0 * this.scale;
        var g = document.createElementNS(this.xmlns, "g");
        g.setAttributeNS(null, "transform", "translate(".concat(x, ",").concat(y, ") scale(").concat(0.85, ")"));
        g.innerHTML = piece;
        return g;
    };
    SVGChessboard.prototype.drawSquare = function (coord) {
        var _a = this.getBoardSVGCord(coord), x = _a[0], y = _a[1];
        var rect = document.createElementNS(this.xmlns, "rect");
        rect.setAttributeNS(null, "x", String(x));
        rect.setAttributeNS(null, "y", String(y));
        rect.setAttributeNS(null, "width", String(this.squareSize));
        rect.setAttributeNS(null, "height", String(this.squareSize));
        rect.setAttributeNS(null, "fill", (coord[1] + coord[0]) % 2 === 0 ? this.whiteColor : this.blackColor);
        return rect;
    };
    SVGChessboard.prototype.drawCoordinateSystem = function () {
        var g = document.createElementNS(this.xmlns, "g");
        for (var r = 0; r < 8; r++) {
            for (var c = 0; c < 8; c++) {
                if ((c === 0 && this.options.orientation === "white") ||
                    (c === 7 && this.options.orientation === "black")) {
                    g.appendChild(this.drawText([c, r], String(8 - r), "row"));
                }
                if ((r === 7 && this.options.orientation === "white") ||
                    (r === 0 && this.options.orientation === "black")) {
                    g.appendChild(this.drawText([c, r], String(this.numToLetter(c)), "column"));
                }
            }
        }
        return g;
    };
    SVGChessboard.prototype.drawText = function (_a, text, position) {
        var c = _a[0], r = _a[1];
        var _b = this.getBoardSVGCord([c, r]), x = _b[0], y = _b[1];
        var txt = document.createElementNS(this.xmlns, "text");
        if (position === "row") {
            txt.setAttributeNS(null, "x", String(x + 1));
            txt.setAttributeNS(null, "y", String(y + 10));
        }
        else {
            txt.setAttributeNS(null, "x", String(x + this.squareSize - 7));
            txt.setAttributeNS(null, "y", String(y + this.squareSize - 2));
        }
        txt.setAttributeNS(null, "font-family", "sans-serif");
        txt.setAttributeNS(null, "font-size", String(10));
        txt.setAttributeNS(null, "fill", (r + c) % 2 === 0 ? this.blackColor : this.whiteColor);
        txt.textContent = text;
        return txt;
    };
    SVGChessboard.prototype.numToLetter = function (num) {
        return String.fromCharCode(97 + num);
    };
    SVGChessboard.prototype.getBoardSVGCord = function (_a) {
        var c = _a[0], r = _a[1];
        if (this.options.orientation == "white") {
            return [c * this.squareSize, r * this.squareSize];
        }
        return [(7 - c) * this.squareSize, (7 - r) * this.squareSize];
    };
    SVGChessboard.fromFEN = function (fenString, options) {
        if (options === void 0) { options = {}; }
        return new SVGChessboard(Chessboard.fromFEN(fenString), options);
    };
    SVGChessboard.fromPGN = function (pgnString, options) {
        if (options === void 0) { options = {}; }
        return new SVGChessboard(Chessboard.fromPGN(pgnString), options);
    };
    return SVGChessboard;
}());

/**
 * Parses a code block containing the FEN board position and the annotations
 * and returns an object with the parsed data.
 *
 * @param input The input string of the FEN code block.
 * @returns An object with the parsed data.
 */
function parseCodeBlock(input) {
    var lines = input.split(/\r?\n/);
    var fen = lines[0];
    if (fen.startsWith("fen: ")) {
        fen = fen.replace("fen: ", "");
    }
    var annotations = [];
    var orientation = "white";
    for (var _i = 0, _a = lines.splice(1); _i < _a.length; _i++) {
        var line = _a[_i];
        if (line.trim() === "") {
            continue;
        }
        if (line.startsWith("orientation: ")) {
            line = line.replace("orientation: ", "");
            line = line.trim();
            if (line !== "white" && line !== "black") {
                throw Error("Unknown orientation ".concat(orientation));
            }
            orientation = line;
        }
        if (line.startsWith("annotations: ")) {
            line = line.replace("annotations: ", "");
            var partial_annotations = line.split(" ");
            for (var _b = 0, partial_annotations_1 = partial_annotations; _b < partial_annotations_1.length; _b++) {
                var annotation = partial_annotations_1[_b];
                if (annotation.startsWith("H")) {
                    var color = "#e67768"; // default yellow
                    if (annotation.endsWith("/y")) {
                        color = "#f1ad24";
                    }
                    else if (annotation.endsWith("/g")) {
                        color = "#b3ce6e";
                    }
                    else if (annotation.endsWith("/b")) {
                        color = "#6ab5d6";
                    }
                    annotations.push({
                        type: "highlight",
                        square: annotation.substring(1, 3),
                        color: color,
                    });
                    continue;
                }
                if (annotation.startsWith("A")) {
                    var color = "#f1ad24"; // default yellow
                    if (annotation.endsWith("/r")) {
                        color = "#e67768";
                    }
                    else if (annotation.endsWith("/g")) {
                        color = "#b3ce6e";
                    }
                    else if (annotation.endsWith("/b")) {
                        color = "#6ab5d6";
                    }
                    var _c = annotation.substring(1, 6).split("-"), start = _c[0], end = _c[1];
                    annotations.push({
                        type: "arrow",
                        start: start,
                        end: end,
                        color: color,
                    });
                    continue;
                }
                var iconMapping = {
                    "!!": "brilliant",
                    "!?": "good",
                    "??": "blunder",
                    "?": "mistake",
                    "!": "excellent",
                    "F": "forced"
                };
                if (annotation.startsWith("F")) {
                    annotations.push({
                        type: "icon",
                        square: annotation.substring(1, 3),
                        icon: iconMapping["F"],
                    });
                    continue;
                }
                if (annotation.startsWith("!?")) {
                    annotations.push({
                        type: "icon",
                        square: annotation.substring(2, 4),
                        icon: iconMapping["!?"],
                    });
                    continue;
                }
                if (annotation.startsWith("!!")) {
                    annotations.push({
                        type: "icon",
                        square: annotation.substring(2, 4),
                        icon: iconMapping["!!"],
                    });
                    continue;
                }
                if (annotation.startsWith("!")) {
                    var icon = iconMapping["!"];
                    annotations.push({
                        type: "icon",
                        square: annotation.substring(1, 3),
                        icon: icon,
                    });
                    continue;
                }
                if (annotation.startsWith("??")) {
                    var icon = iconMapping["??"];
                    annotations.push({
                        type: "icon",
                        square: annotation.substring(2, 4),
                        icon: icon,
                    });
                    continue;
                }
                if (annotation.startsWith("?")) {
                    var icon = iconMapping["?"];
                    annotations.push({
                        type: "icon",
                        square: annotation.substring(1, 3),
                        icon: icon,
                    });
                    continue;
                }
            }
        }
    }
    return { fen: fen, annotations: annotations, orientation: orientation };
}

var ObsidianChess = /** @class */ (function (_super) {
    __extends(ObsidianChess, _super);
    function ObsidianChess() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObsidianChess.prototype.onInit = function () { };
    ObsidianChess.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.setting = (_b.sent()) || {
                            whiteSquareColor: "#f0d9b5",
                            blackSquareColor: "#b58862",
                            whitePieceColor: "#ffffff",
                            blackPieceColor: "#000000",
                            boardWidthPx: 320,
                        };
                        // In case the settting exists but is missing a field due to an update
                        if (this.setting.boardWidthPx === undefined) {
                            this.setting.boardWidthPx = 320;
                        }
                        this.addSettingTab(new ObsidianChessSettingsTab(this.app, this));
                        this.registerMarkdownCodeBlockProcessor("chessboard", this.getDrawChessboardFENFuncion());
                        this.registerMarkdownCodeBlockProcessor("chessboard-pgn", this.getDrawChessboardPGNFunction());
                        return [2 /*return*/];
                }
            });
        });
    };
    ObsidianChess.prototype.refreshChessboardBlocks = function () {
        // TODO: This only works in preview mode. I still don't know how to refresh
        // the ones in edit mode.
        var view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        view.previewMode.rerender(true);
    };
    ObsidianChess.prototype.drawChessboard = function (chessboard, el, _ctx) {
        var xmlns = "http://www.w3.org/2000/svg";
        var boardWidthPx = this.setting.boardWidthPx;
        var block = document.createElementNS(xmlns, "svg");
        block.setAttributeNS(null, "viewBox", "0 0 320 320");
        block.setAttributeNS(null, "width", String(boardWidthPx));
        block.setAttributeNS(null, "height", String(boardWidthPx));
        block.appendChild(chessboard.draw());
        block.style.display = "block";
        el.appendChild(block);
    };
    ObsidianChess.prototype.drawErrorMessage = function (error, el) {
        console.error(error);
        // Append the error message to the block with red color
        var errorMessage = document.createTextNode(error.message);
        var errorEl = document.createElement("div");
        errorEl.style.color = "red";
        errorEl.appendChild(errorMessage);
        el.appendChild(errorEl);
    };
    ObsidianChess.prototype.getDrawChessboardPGNFunction = function () {
        var _this = this;
        return function (source, el, ctx) {
            try {
                _this.setting.orientation = "white";
                var chessboard = SVGChessboard.fromPGN(source, _this.setting);
                // TODO: Add support for annotations in PGN
                // for (let annotation of parsedCode.annotations) {
                //   if (annotation.type === "arrow") {
                //     chessboard.addArrow(
                //       annotation.start,
                //       annotation.end,
                //       annotation.color
                //     );
                //   }
                //   if (annotation.type === "highlight") {
                //     chessboard.highlight(annotation.square, annotation.color);
                //   }
                // }
                _this.drawChessboard(chessboard, el, ctx);
            }
            catch (e) {
                _this.drawErrorMessage(e, el);
            }
        };
    };
    ObsidianChess.prototype.getDrawChessboardFENFuncion = function () {
        var _this = this;
        return function (source, el, ctx) {
            var parsedCode = parseCodeBlock(source);
            try {
                _this.setting.orientation = parsedCode.orientation;
                var chessboard = SVGChessboard.fromFEN(parsedCode.fen, _this.setting);
                for (var _i = 0, _a = parsedCode.annotations; _i < _a.length; _i++) {
                    var annotation = _a[_i];
                    if (annotation.type === "arrow") {
                        chessboard.addArrow(annotation.start, annotation.end, annotation.color);
                    }
                    if (annotation.type === "highlight") {
                        chessboard.highlight(annotation.square, annotation.color);
                    }
                    if (annotation.type === "icon") {
                        chessboard.addIcon(annotation.square, annotation.icon);
                    }
                }
                _this.drawChessboard(chessboard, el, ctx);
            }
            catch (e) {
                _this.drawErrorMessage(e, el);
            }
        };
    };
    return ObsidianChess;
}(obsidian.Plugin));
var ObsidianChessSettingsTab = /** @class */ (function (_super) {
    __extends(ObsidianChessSettingsTab, _super);
    function ObsidianChessSettingsTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    ObsidianChessSettingsTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        var settings = this.plugin.setting;
        containerEl.empty();
        new obsidian.Setting(containerEl).setName("Chessboard Customization").setHeading();
        new obsidian.Setting(containerEl)
            .setName("White Square Color")
            .setDesc('Set the color of the "white" squares.')
            .addColorPicker(function (color) {
            return color.setValue(String(settings.whiteSquareColor)).onChange(function (value) {
                settings.whiteSquareColor = value;
                _this.plugin.refreshChessboardBlocks();
                _this.plugin.saveData(settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName("Black Square Color")
            .setDesc('Set the color of the "black" squares.')
            .addColorPicker(function (color) {
            return color.setValue(String(settings.blackSquareColor)).onChange(function (value) {
                settings.blackSquareColor = value;
                _this.plugin.refreshChessboardBlocks();
                _this.plugin.saveData(settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName("White Pieces Color")
            .setDesc('Set the color of the "white" pieces.')
            .addColorPicker(function (color) {
            return color.setValue(settings.whitePieceColor).onChange(function (value) {
                settings.whitePieceColor = value;
                _this.plugin.refreshChessboardBlocks();
                _this.plugin.saveData(settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName("Black Pieces Color")
            .setDesc('Set the color of the "black" pieces.')
            .addColorPicker(function (color) {
            return color.setValue(String(settings.blackPieceColor)).onChange(function (value) {
                settings.blackPieceColor = value;
                _this.plugin.refreshChessboardBlocks();
                _this.plugin.saveData(settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName("Chessboard Size (px)")
            .setDesc("Sets the side of the chess board in pixels.")
            .addText(function (text) {
            return text.setValue(String(settings.boardWidthPx)).onChange(function (value) {
                var numericValue = Number(value);
                if (!isNaN(numericValue) && numericValue > 0) {
                    settings.boardWidthPx = numericValue;
                    _this.plugin.refreshChessboardBlocks();
                    _this.plugin.saveData(settings);
                }
                else {
                    new obsidian.Notice("Please enter a valid positive number for the board size.");
                }
            });
        });
    };
    return ObsidianChessSettingsTab;
}(obsidian.PluginSettingTab));

module.exports = ObsidianChess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9jaGVzc2JvYXJkc3ZnL0Fycm93LnRzIiwic3JjL2NoZXNzYm9hcmRzdmcvSWNvbnMudHMiLCJub2RlX21vZHVsZXMvY2hlc3MuanMvZGlzdC9lc20vcGduLmpzIiwibm9kZV9tb2R1bGVzL2NoZXNzLmpzL2Rpc3QvZXNtL2NoZXNzLmpzIiwic3JjL2NoZXNzYm9hcmRzdmcvQ2hlc3Nib2FyZC50cyIsInNyYy9jaGVzc2JvYXJkc3ZnL1BpZWNlcy50cyIsInNyYy9jaGVzc2JvYXJkc3ZnL2luZGV4LnRzIiwic3JjL0Fubm90YXRpb25zLnRzIiwic3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOm51bGwsIm5hbWVzIjpbInBhcnNlIiwiTWFya2Rvd25WaWV3IiwiUGx1Z2luIiwiU2V0dGluZyIsIk5vdGljZSIsIlBsdWdpblNldHRpbmdUYWIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ25DLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0FBQ3pDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNwRixRQUFRLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUMxRyxJQUFJLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFDRjtBQUNPLFNBQVMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDaEMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEtBQUssSUFBSTtBQUM3QyxRQUFRLE1BQU0sSUFBSSxTQUFTLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLCtCQUErQixDQUFDLENBQUM7QUFDbEcsSUFBSSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0FBQzNDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6RixDQUFDO0FBb0ZEO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRDtBQUNPLFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDM0MsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLFFBQVEsS0FBSyxVQUFVLEdBQUcsUUFBUSxHQUFHLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDaEssSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN0RSxJQUFJLFNBQVMsSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUN0QixRQUFRLElBQUksQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUN0RSxRQUFRLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJO0FBQ3RELFlBQVksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxP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QUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDMUQsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ2xFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUNsRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7QUFDbEUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0FBQ2xFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUNsRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUc7QUFDdEUsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRTtBQUN2RSxDQUFDO0FBQ0QsTUFBTSxZQUFZLEdBQUc7QUFDckIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDM0IsQ0FBQztBQUNELE1BQU0sYUFBYSxHQUFHO0FBQ3RCLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUMzQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDekMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ3pDLENBQUM7QUFDRDtBQUNBLE1BQU0sT0FBTyxHQUFHO0FBQ2hCLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUNyRCxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRCxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7QUFDaEUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRCxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckQsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ2hELENBQUM7QUFDRDtBQUNBLE1BQU0sSUFBSSxHQUFHO0FBQ2IsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNyRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDeEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0FBQ3hELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUN4RCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FB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LEVBQUU7QUFDdkMsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUs7QUFDOUIsUUFBUSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUM7QUFDM0IsUUFBUSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUM7QUFDNUIsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUU7QUFDMUIsUUFBUSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUU7QUFDM0IsUUFBUSxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRyxlQUFlLEVBQUU7QUFDOUUsUUFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDeEMsUUFBUSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxFQUFFO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSTtBQUNwQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSTtBQUNsQztBQUNBLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLGNBQWMsR0FBRyxLQUFLLEVBQUUsZUFBZSxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtBQUN4RSxRQUFRLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBQ3JDO0FBQ0EsUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3JELFlBQVksTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7QUFDcEQsWUFBWSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFD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O0FBQ2hFLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUk7QUFDN0MsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJO0FBQ2hELFlBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxLQUFLLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7QUFDdkUsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDdkQsWUFBWSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDdkMsWUFBWSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUs7QUFDbEMsWUFBWTtBQUNaO0FBQ0EsUUFBUSxNQUFNLFVBQVUsR0FBRyxDQUFDLE1BQU0sS0FBSyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDdkQsWUFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSztBQUNyRCxZQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxLQUFLLElBQUk7QUFDOUMsUUFBUSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUN6QyxZQUFZLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN2QyxZQUFZLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSztBQUNsQztBQUNBO0FBQ0EsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDdEMsUUFBUSxNQUFNLFNBQVMsR0FBRyxFQUFFO0FBQzVCLFFBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFF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LElBQUk7QUFDckIsb0JBQUEsS0FBSyxNQUFNO0FBQ1Qsd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3hEO0FBQ0Ysb0JBQUEsS0FBSyxTQUFTO0FBQ1osd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQzNEO0FBQ0Ysb0JBQUEsS0FBSyxTQUFTO0FBQ1osd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQzNEO0FBQ0Ysb0JBQUEsS0FBSyxZQUFZO0FBQ2Ysd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQzlEO0FBQ0Ysb0JBQUEsS0FBSyxXQUFXO0FBQ2Qsd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzdEO0FBQ0Ysb0JBQUEsS0FBSyxNQUFNO0FBQ1Qsd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ3hEO0FBQ0Ysb0JBQUEsS0FBSyxXQUFXO0FBQ2Qsd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzdEO0FBQ0Ysb0JBQUEsS0FBSyxXQUFXO0FBQ2Qsd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQzdEO0FBQ0Ysb0JBQUEsS0FBSyxRQUFRO0FBQ1gsd0JBQUEsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7d0JBQzFEOzs7O0FBSVIsUUFBQSxPQUFPLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQztLQUN6QjtBQUVPLElBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxtQkFBbUIsR0FBM0IsVUFBNEIsQ0FBUyxFQUFFLENBQVMsRUFBQTtRQUM5QyxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFDLEVBQUUsRUFBQTtZQUN0QyxJQUFBLEVBQUEsR0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQWIsQ0FBQyxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBRSxDQUFDLEdBQUEsRUFBQSxDQUFBLENBQUEsQ0FBUztBQUNwQixZQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUMzQixTQUFDLENBQUM7UUFDRixPQUFPLGFBQWEsYUFBYixhQUFhLEtBQUEsTUFBQSxHQUFBLE1BQUEsR0FBYixhQUFhLENBQUcsQ0FBQyxDQUFDO0tBQzFCO0FBRU8sSUFBQSxhQUFBLENBQUEsU0FBQSxDQUFBLFNBQVMsR0FBakIsWUFBQTtBQUNFLFFBQUEsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQztBQUNqRCxRQUFBLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDMUIsWUFBQSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFCLGdCQUFBLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFHMUMsUUFBQSxPQUFPLENBQUM7S0FDVDtBQUVPLElBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxVQUFVLEdBQWxCLFlBQUE7QUFDRSxRQUFBLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7QUFDakQsUUFBQSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFCLFlBQUEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQixnQkFBQSxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUV2QyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNWOztBQUdGLGdCQUFBLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxHQUFHLEVBQUU7b0JBQ3ZCLENBQUMsQ0FBQyxXQUFXLENBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzlEOztBQUNJLHFCQUFBLElBQUksS0FBSyxDQUFDLEtBQUssS0FBSyxHQUFHLEVBQUU7b0JBQzlCLENBQUMsQ0FBQyxXQUFXLENBQ1gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQzlEOztxQkFDSTtvQkFDTDs7OztBQUlOLFFBQUEsT0FBTyxDQUFDO0tBQ1Q7QUFFTyxJQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsUUFBUSxHQUFoQixVQUFpQixLQUFzQixFQUFFLElBQWlCLEVBQUE7QUFDcEQsUUFBQSxJQUFBLEVBQVMsR0FBQSxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFuQyxDQUFDLEdBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxFQUFFLENBQUMsUUFBK0I7QUFDeEMsUUFBQSxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0FBRWpELFFBQUEsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFlBQWEsQ0FBQSxNQUFBLENBQUEsQ0FBQyxjQUFJLENBQUMsRUFBQSxVQUFBLENBQUEsQ0FBQSxNQUFBLENBQVcsSUFBSSxFQUFBLEdBQUEsQ0FBRyxDQUFDO1FBQzFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUksRUFBQTtZQUN2QyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsU0FBQyxDQUFDO0FBQ0YsUUFBQSxPQUFPLENBQUM7S0FDVDtBQUVPLElBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxTQUFTLEdBQWpCLFVBQWtCLEtBQXNCLEVBQUUsS0FBYSxFQUFBO0FBQ2pELFFBQUEsSUFBQSxFQUFTLEdBQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBbkMsQ0FBQyxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBRSxDQUFDLFFBQStCOztBQUV4QyxRQUFBLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7QUFDakQsUUFBQSxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsWUFBYSxDQUFBLE1BQUEsQ0FBQSxDQUFDLGNBQUksQ0FBQyxFQUFBLFVBQUEsQ0FBQSxDQUFBLE1BQUEsQ0FBVyxJQUFJLEVBQUEsR0FBQSxDQUFHLENBQUM7QUFDMUUsUUFBQSxDQUFDLENBQUMsU0FBUyxHQUFHLEtBQUs7QUFDbkIsUUFBQSxPQUFPLENBQUM7S0FDVDtJQUVPLGFBQVUsQ0FBQSxTQUFBLENBQUEsVUFBQSxHQUFsQixVQUFtQixLQUFzQixFQUFBO0FBQ25DLFFBQUEsSUFBQSxFQUFTLEdBQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBbkMsQ0FBQyxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBRSxDQUFDLFFBQStCO0FBQ3hDLFFBQUEsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUN2RCxRQUFBLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekMsUUFBQSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLFFBQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0QsUUFBQSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1RCxRQUFBLElBQUksQ0FBQyxjQUFjLENBQ2pCLElBQUksRUFDSixNQUFNLEVBQ04sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUNwRTtBQUNELFFBQUEsT0FBTyxJQUFJO0tBQ1o7QUFFRCxJQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsb0JBQW9CLEdBQXBCLFlBQUE7QUFDRSxRQUFBLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7QUFDakQsUUFBQSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFCLFlBQUEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQixnQkFBQSxJQUNFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsS0FBSyxPQUFPO0FBQ2hELHFCQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEtBQUssT0FBTyxDQUFDLEVBQ2pEO29CQUNBLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDOztBQUU1RCxnQkFBQSxJQUNFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsS0FBSyxPQUFPO0FBQ2hELHFCQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEtBQUssT0FBTyxDQUFDLEVBQ2pEO29CQUNBLENBQUMsQ0FBQyxXQUFXLENBQ1gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUM3RDs7OztBQUlQLFFBQUEsT0FBTyxDQUFDO0tBQ1Q7QUFFTyxJQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsUUFBUSxHQUFoQixVQUNFLEVBQXVCLEVBQ3ZCLElBQVksRUFDWixRQUEwQixFQUFBO1lBRnpCLENBQUMsR0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUUsQ0FBQyxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7QUFJRCxRQUFBLElBQUEsS0FBUyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQXBDLENBQUMsUUFBQSxFQUFFLENBQUMsUUFBZ0M7QUFDekMsUUFBQSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO0FBQ3RELFFBQUEsSUFBSSxRQUFRLEtBQUssS0FBSyxFQUFFO0FBQ3RCLFlBQUEsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDNUMsWUFBQSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs7YUFDeEM7QUFDTCxZQUFBLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsWUFBQSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDOztRQUVoRSxHQUFHLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsWUFBWSxDQUFDO0FBQ3JELFFBQUEsR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxRQUFBLEdBQUcsQ0FBQyxjQUFjLENBQ2hCLElBQUksRUFDSixNQUFNLEVBQ04sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUN0RDtBQUNELFFBQUEsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJO0FBQ3RCLFFBQUEsT0FBTyxHQUFHO0tBQ1g7SUFFTyxhQUFXLENBQUEsU0FBQSxDQUFBLFdBQUEsR0FBbkIsVUFBb0IsR0FBVyxFQUFBO1FBQzdCLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO0tBQ3JDO0lBRU8sYUFBZSxDQUFBLFNBQUEsQ0FBQSxlQUFBLEdBQXZCLFVBQXdCLEVBQXVCLEVBQUE7WUFBdEIsQ0FBQyxHQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsRUFBRSxDQUFDLEdBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQTtRQUMzQixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxJQUFJLE9BQU8sRUFBRTtBQUN2QyxZQUFBLE9BQU8sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQzs7UUFFbkQsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO0tBQzlEO0FBRU0sSUFBQSxhQUFBLENBQUEsT0FBTyxHQUFkLFVBQ0UsU0FBaUIsRUFDakIsT0FBMkMsRUFBQTtBQUEzQyxRQUFBLElBQUEsT0FBQSxLQUFBLE1BQUEsRUFBQSxFQUFBLE9BQTJDLEdBQUEsRUFBQSxDQUFBO0FBRTNDLFFBQUEsT0FBTyxJQUFJLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sQ0FBQztLQUNqRTtBQUVNLElBQUEsYUFBQSxDQUFBLE9BQU8sR0FBZCxVQUNFLFNBQWlCLEVBQ2pCLE9BQTJDLEVBQUE7QUFBM0MsUUFBQSxJQUFBLE9BQUEsS0FBQSxNQUFBLEVBQUEsRUFBQSxPQUEyQyxHQUFBLEVBQUEsQ0FBQTtBQUUzQyxRQUFBLE9BQU8sSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLENBQUM7S0FDakU7SUFDSCxPQUFDLGFBQUE7QUFBRCxDQUFDLEVBQUEsQ0FBQTs7QUMzVkQ7Ozs7OztBQU1HO0FBQ0csU0FBVSxjQUFjLENBQUMsS0FBYSxFQUFBO0lBQzFDLElBQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQ2xDLElBQUEsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNsQixJQUFBLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDOztJQUVoQyxJQUFNLFdBQVcsR0FBc0IsRUFBRTtJQUN6QyxJQUFJLFdBQVcsR0FBc0IsT0FBTztBQUM1QyxJQUFBLEtBQWlCLElBQWUsRUFBQSxHQUFBLENBQUEsRUFBZixFQUFBLEdBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBZixFQUFBLEdBQUEsRUFBQSxDQUFBLE1BQWUsRUFBZixFQUFBLEVBQWUsRUFBRTtBQUE3QixRQUFBLElBQUksSUFBSSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUE7QUFDWCxRQUFBLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN0Qjs7QUFFRixRQUFBLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUNwQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDO0FBQ3hDLFlBQUEsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDbEIsSUFBSSxJQUFJLEtBQUssT0FBTyxJQUFJLElBQUksS0FBSyxPQUFPLEVBQUU7QUFDeEMsZ0JBQUEsTUFBTSxLQUFLLENBQUMsc0JBQUEsQ0FBQSxNQUFBLENBQXVCLFdBQVcsQ0FBRSxDQUFDOztZQUVuRCxXQUFXLEdBQUcsSUFBSTs7QUFFcEIsUUFBQSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQztZQUN4QyxJQUFJLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3pDLEtBQXVCLElBQUEsRUFBQSxHQUFBLENBQW1CLEVBQW5CLHFCQUFtQixHQUFBLG1CQUFBLEVBQW5CLGlDQUFtQixFQUFuQixFQUFBLEVBQW1CLEVBQUU7QUFBdkMsZ0JBQUEsSUFBSSxVQUFVLEdBQUEscUJBQUEsQ0FBQSxFQUFBLENBQUE7QUFDakIsZ0JBQUEsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzlCLG9CQUFBLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUN0QixvQkFBQSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQzdCLEtBQUssR0FBRyxTQUFTOztBQUNaLHlCQUFBLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDcEMsS0FBSyxHQUFHLFNBQVM7O0FBQ1oseUJBQUEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNwQyxLQUFLLEdBQUcsU0FBUzs7b0JBRW5CLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDZix3QkFBQSxJQUFJLEVBQUUsV0FBVzt3QkFDakIsTUFBTSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyx3QkFBQSxLQUFLLEVBQUUsS0FBSztBQUNiLHFCQUFBLENBQUM7b0JBQ0Y7O0FBRUYsZ0JBQUEsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzlCLG9CQUFBLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUN0QixvQkFBQSxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7d0JBQzdCLEtBQUssR0FBRyxTQUFTOztBQUNaLHlCQUFBLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDcEMsS0FBSyxHQUFHLFNBQVM7O0FBQ1oseUJBQUEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNwQyxLQUFLLEdBQUcsU0FBUzs7b0JBRWYsSUFBQSxFQUFBLEdBQWUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFuRCxLQUFLLFFBQUEsRUFBRSxHQUFHLFFBQXlDO29CQUN4RCxXQUFXLENBQUMsSUFBSSxDQUFDO0FBQ2Ysd0JBQUEsSUFBSSxFQUFFLE9BQU87QUFDYix3QkFBQSxLQUFLLEVBQUEsS0FBQTtBQUNMLHdCQUFBLEdBQUcsRUFBQSxHQUFBO0FBQ0gsd0JBQUEsS0FBSyxFQUFFLEtBQUs7QUFDYixxQkFBQSxDQUFDO29CQUNGOztBQUVGLGdCQUFBLElBQU0sV0FBVyxHQUEyQjtBQUMxQyxvQkFBQSxJQUFJLEVBQUUsV0FBVztBQUNqQixvQkFBQSxJQUFJLEVBQUUsTUFBTTtBQUNaLG9CQUFBLElBQUksRUFBRSxTQUFTO0FBQ2Ysb0JBQUEsR0FBRyxFQUFFLFNBQVM7QUFDZCxvQkFBQSxHQUFHLEVBQUUsV0FBVztBQUNoQixvQkFBQSxHQUFHLEVBQUU7aUJBQ047QUFDRCxnQkFBQSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQzlCLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDZix3QkFBQSxJQUFJLEVBQUUsTUFBTTt3QkFDWixNQUFNLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLHdCQUFBLElBQUksRUFBRSxXQUFXLENBQUMsR0FBRyxDQUFDO0FBQ3ZCLHFCQUFBLENBQUM7b0JBQ0Y7O0FBRUYsZ0JBQUEsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUMvQixXQUFXLENBQUMsSUFBSSxDQUFDO0FBQ2Ysd0JBQUEsSUFBSSxFQUFFLE1BQU07d0JBQ1osTUFBTSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyx3QkFBQSxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQztBQUN4QixxQkFBQSxDQUFDO29CQUNGOztBQUVGLGdCQUFBLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDL0IsV0FBVyxDQUFDLElBQUksQ0FBQztBQUNmLHdCQUFBLElBQUksRUFBRSxNQUFNO3dCQUNaLE1BQU0sRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsd0JBQUEsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDeEIscUJBQUEsQ0FBQztvQkFDRjs7QUFFRixnQkFBQSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDOUIsb0JBQUEsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztvQkFDM0IsV0FBVyxDQUFDLElBQUksQ0FBQztBQUNmLHdCQUFBLElBQUksRUFBRSxNQUFNO3dCQUNaLE1BQU0sRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEMsd0JBQUEsSUFBSSxFQUFFLElBQUk7QUFDWCxxQkFBQSxDQUFDO29CQUNGOztBQUVGLGdCQUFBLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMvQixvQkFBQSxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO29CQUM1QixXQUFXLENBQUMsSUFBSSxDQUFDO0FBQ2Ysd0JBQUEsSUFBSSxFQUFFLE1BQU07d0JBQ1osTUFBTSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsQyx3QkFBQSxJQUFJLEVBQUUsSUFBSTtBQUNYLHFCQUFBLENBQUM7b0JBQ0Y7O0FBRUYsZ0JBQUEsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzlCLG9CQUFBLElBQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUM7b0JBQzNCLFdBQVcsQ0FBQyxJQUFJLENBQUM7QUFDZix3QkFBQSxJQUFJLEVBQUUsTUFBTTt3QkFDWixNQUFNLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLHdCQUFBLElBQUksRUFBRSxJQUFJO0FBQ1gscUJBQUEsQ0FBQztvQkFDRjs7Ozs7SUFLUixPQUFPLEVBQUUsR0FBRyxFQUFBLEdBQUEsRUFBRSxXQUFXLGFBQUEsRUFBRSxXQUFXLEVBQUEsV0FBQSxFQUFFO0FBQzFDOztBQzlKQSxJQUFBLGFBQUEsa0JBQUEsVUFBQSxNQUFBLEVBQUE7SUFBMkMsU0FBTSxDQUFBLGFBQUEsRUFBQSxNQUFBLENBQUE7QUFBakQsSUFBQSxTQUFBLGFBQUEsR0FBQTs7O0lBSUUsYUFBTSxDQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQU4sZUFBVztBQUVMLElBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxNQUFNLEdBQVosWUFBQTs7Ozs7O0FBQ0Usd0JBQUEsRUFBQSxHQUFBLElBQUk7QUFBWSx3QkFBQSxPQUFBLENBQUEsQ0FBQSxZQUFNLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTs7QUFBckMsd0JBQUEsRUFBQSxDQUFLLE9BQU8sR0FBRyxDQUFDLEVBQUEsQ0FBQSxJQUFBLEVBQXFCLEtBQUs7QUFDeEMsNEJBQUEsZ0JBQWdCLEVBQUUsU0FBUztBQUMzQiw0QkFBQSxnQkFBZ0IsRUFBRSxTQUFTO0FBQzNCLDRCQUFBLGVBQWUsRUFBRSxTQUFTO0FBQzFCLDRCQUFBLGVBQWUsRUFBRSxTQUFTO0FBQzFCLDRCQUFBLFlBQVksRUFBRSxHQUFHO3lCQUNsQjs7d0JBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7QUFDM0MsNEJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsR0FBRzs7QUFFakMsd0JBQUEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7d0JBQ2hFLElBQUksQ0FBQyxrQ0FBa0MsQ0FDckMsWUFBWSxFQUNaLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUNuQzt3QkFDRCxJQUFJLENBQUMsa0NBQWtDLENBQ3JDLGdCQUFnQixFQUNoQixJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FDcEM7Ozs7O0FBQ0YsS0FBQTtBQUVELElBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSx1QkFBdUIsR0FBdkIsWUFBQTs7O0FBR0UsUUFBQSxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQ0MscUJBQVksQ0FBQztBQUNqRSxRQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztLQUNoQztBQUVPLElBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxjQUFjLEdBQXRCLFVBQ0UsVUFBeUIsRUFDekIsRUFBZSxFQUNmLElBQWtDLEVBQUE7UUFFbEMsSUFBTSxLQUFLLEdBQUcsNEJBQTRCO0FBQzFDLFFBQUEsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZO1FBQzlDLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztRQUNwRCxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsYUFBYSxDQUFDO0FBQ3BELFFBQUEsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN6RCxRQUFBLEtBQUssQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUQsS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDcEMsUUFBQSxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPO0FBQzdCLFFBQUEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7S0FDdEI7QUFFTyxJQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsZ0JBQWdCLEdBQXhCLFVBQXlCLEtBQVksRUFBRSxFQUFlLEVBQUE7QUFDcEQsUUFBQSxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzs7UUFFcEIsSUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzNELElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO0FBQzdDLFFBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSztBQUMzQixRQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO0FBQ2pDLFFBQUEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7S0FDeEI7QUFFTyxJQUFBLGFBQUEsQ0FBQSxTQUFBLENBQUEsNEJBQTRCLEdBQXBDLFlBQUE7UUFBQSxJQTJCQyxLQUFBLEdBQUEsSUFBQTtBQTFCQyxRQUFBLE9BQU8sVUFDTCxNQUFjLEVBQ2QsRUFBZSxFQUNmLEdBQWlDLEVBQUE7QUFFakMsWUFBQSxJQUFJO0FBQ0YsZ0JBQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTztBQUNsQyxnQkFBQSxJQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsT0FBTyxDQUFDOzs7Ozs7Ozs7Ozs7OztnQkFjOUQsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQzs7WUFDeEMsT0FBTyxDQUFDLEVBQUU7QUFDVixnQkFBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs7QUFFaEMsU0FBQztLQUNGO0FBRU8sSUFBQSxhQUFBLENBQUEsU0FBQSxDQUFBLDJCQUEyQixHQUFuQyxZQUFBO1FBQUEsSUE4QkMsS0FBQSxHQUFBLElBQUE7QUE3QkMsUUFBQSxPQUFPLFVBQ0wsTUFBYyxFQUNkLEVBQWUsRUFDZixHQUFpQyxFQUFBO0FBRWpDLFlBQUEsSUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQztBQUN6QyxZQUFBLElBQUk7Z0JBQ0YsS0FBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVc7QUFDakQsZ0JBQUEsSUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3RFLEtBQXVCLElBQUEsRUFBQSxHQUFBLENBQXNCLEVBQXRCLEVBQUEsR0FBQSxVQUFVLENBQUMsV0FBVyxFQUF0QixFQUFzQixHQUFBLEVBQUEsQ0FBQSxNQUFBLEVBQXRCLEVBQXNCLEVBQUEsRUFBRTtBQUExQyxvQkFBQSxJQUFJLFVBQVUsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBO0FBQ2pCLG9CQUFBLElBQUksVUFBVSxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7QUFDL0Isd0JBQUEsVUFBVSxDQUFDLFFBQVEsQ0FDakIsVUFBVSxDQUFDLEtBQUssRUFDaEIsVUFBVSxDQUFDLEdBQUcsRUFDZCxVQUFVLENBQUMsS0FBSyxDQUNqQjs7QUFFSCxvQkFBQSxJQUFJLFVBQVUsQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO3dCQUNuQyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQzs7QUFFM0Qsb0JBQUEsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTt3QkFDOUIsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUM7OztnQkFHMUQsS0FBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQzs7WUFDeEMsT0FBTyxDQUFDLEVBQUU7QUFDVixnQkFBQSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs7QUFFaEMsU0FBQztLQUNGO0lBQ0gsT0FBQyxhQUFBO0FBQUQsQ0ExSEEsQ0FBMkNDLGVBQU0sQ0EwSGhEO0FBY0QsSUFBQSx3QkFBQSxrQkFBQSxVQUFBLE1BQUEsRUFBQTtJQUF1QyxTQUFnQixDQUFBLHdCQUFBLEVBQUEsTUFBQSxDQUFBO0lBR3JELFNBQVksd0JBQUEsQ0FBQSxHQUFRLEVBQUUsTUFBcUIsRUFBQTtBQUN6QyxRQUFBLElBQUEsS0FBQSxHQUFBLE1BQUssQ0FBQyxJQUFBLENBQUEsSUFBQSxFQUFBLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBQyxJQUFBO0FBQ25CLFFBQUEsS0FBSSxDQUFDLE1BQU0sR0FBRyxNQUFNOzs7QUFHdEIsSUFBQSx3QkFBQSxDQUFBLFNBQUEsQ0FBQSxPQUFPLEdBQVAsWUFBQTtRQUFBLElBcUVDLEtBQUEsR0FBQSxJQUFBO0FBcEVTLFFBQUEsSUFBQSxXQUFXLEdBQUssSUFBSSxDQUFBLFdBQVQ7QUFDbkIsUUFBQSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU87UUFFcEMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUVuQixRQUFBLElBQUlDLGdCQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUMsVUFBVSxFQUFFO1FBRXpFLElBQUlBLGdCQUFPLENBQUMsV0FBVzthQUNwQixPQUFPLENBQUMsb0JBQW9CO2FBQzVCLE9BQU8sQ0FBQyx1Q0FBdUM7YUFDL0MsY0FBYyxDQUFDLFVBQUMsS0FBSyxFQUFBO0FBQ3BCLFlBQUEsT0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFDLEtBQUssRUFBQTtBQUMvRCxnQkFBQSxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsS0FBSztBQUNqQyxnQkFBQSxLQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFO0FBQ3JDLGdCQUFBLEtBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUNoQyxhQUFDLENBQUM7QUFKRixTQUlFLENBQ0g7UUFFSCxJQUFJQSxnQkFBTyxDQUFDLFdBQVc7YUFDcEIsT0FBTyxDQUFDLG9CQUFvQjthQUM1QixPQUFPLENBQUMsdUNBQXVDO2FBQy9DLGNBQWMsQ0FBQyxVQUFDLEtBQUssRUFBQTtBQUNwQixZQUFBLE9BQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBQyxLQUFLLEVBQUE7QUFDL0QsZ0JBQUEsUUFBUSxDQUFDLGdCQUFnQixHQUFHLEtBQUs7QUFDakMsZ0JBQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRTtBQUNyQyxnQkFBQSxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDaEMsYUFBQyxDQUFDO0FBSkYsU0FJRSxDQUNIO1FBRUgsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXO2FBQ3BCLE9BQU8sQ0FBQyxvQkFBb0I7YUFDNUIsT0FBTyxDQUFDLHNDQUFzQzthQUM5QyxjQUFjLENBQUMsVUFBQyxLQUFLLEVBQUE7QUFDcEIsWUFBQSxPQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFDLEtBQUssRUFBQTtBQUN0RCxnQkFBQSxRQUFRLENBQUMsZUFBZSxHQUFHLEtBQUs7QUFDaEMsZ0JBQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRTtBQUNyQyxnQkFBQSxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDaEMsYUFBQyxDQUFDO0FBSkYsU0FJRSxDQUNIO1FBRUgsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXO2FBQ3BCLE9BQU8sQ0FBQyxvQkFBb0I7YUFDNUIsT0FBTyxDQUFDLHNDQUFzQzthQUM5QyxjQUFjLENBQUMsVUFBQyxLQUFLLEVBQUE7QUFDcEIsWUFBQSxPQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFDLEtBQUssRUFBQTtBQUM5RCxnQkFBQSxRQUFRLENBQUMsZUFBZSxHQUFHLEtBQUs7QUFDaEMsZ0JBQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRTtBQUNyQyxnQkFBQSxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDaEMsYUFBQyxDQUFDO0FBSkYsU0FJRSxDQUNIO1FBRUgsSUFBSUEsZ0JBQU8sQ0FBQyxXQUFXO2FBQ3BCLE9BQU8sQ0FBQyxzQkFBc0I7YUFDOUIsT0FBTyxDQUFDLDZDQUE2QzthQUNyRCxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUE7QUFDWixZQUFBLE9BQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQUMsS0FBSyxFQUFBO0FBQzFELGdCQUFBLElBQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxHQUFHLENBQUMsRUFBRTtBQUM1QyxvQkFBQSxRQUFRLENBQUMsWUFBWSxHQUFHLFlBQVk7QUFDcEMsb0JBQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRTtBQUNyQyxvQkFBQSxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7O3FCQUN6QjtBQUNMLG9CQUFBLElBQUlDLGVBQU0sQ0FDUiwwREFBMEQsQ0FDM0Q7O0FBRUwsYUFBQyxDQUFDO0FBWEYsU0FXRSxDQUNIO0tBQ0o7SUFDSCxPQUFDLHdCQUFBO0FBQUQsQ0E5RUEsQ0FBdUNDLHlCQUFnQixDQThFdEQsQ0FBQTs7OzsiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwzLDRdfQ==
